================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-14T08:48:35.328Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  favicon.ico
  index.html
  logo192.png
  logo512.png
  manifest.json
  robots.txt
server/
  routes/
    paymentRoutes.js
  server.js
src/
  components/
    reservations/
      Step1.js
      Step2.js
      Step3.js
      Step4.js
      Step5.js
      Step6.js
      Step7.js
      Step8.js
    ui/
      button.jsx
      card.jsx
      input.jsx
    CampgroundKiosk.js
    CheckIn.js
    CheckOut.js
    CheckoutForm.js
    CommonLayout.js
    DateSelection.js
    ExtrasSelector.js
    Header.js
    MakeReservation.js
    ManageReservation.js
    Modal.js
    PayForStay.js
    PurchaseExtras.js
    ReservationCalendar.js
    SiteAvailability.js
  config/
    appConfig.js
  context/
    CampgroundContext.js
  hooks/
    useForm.js
  lib/
    supabaseClient.js
    utils.js
  pages/
    api/
      auth/
        [...supabase].js
      available-sites.js
      reservations.js
      site-types.js
  services/
    api.js
    mockApi.js
  App.css
  App.js
  App.test.js
  index.css
  index.js
  logo.svg
  reportWebVitals.js
  setupTests.js
.gitignore
package.json
postcss.config.js
README.md
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

.env

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: package.json
================
{
  "name": "campground-management",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@radix-ui/react-slot": "^1.1.0",
    "@shadcn/ui": "^0.0.4",
    "@stripe/react-stripe-js": "^2.8.0",
    "@stripe/stripe-js": "^4.4.0",
    "@supabase/supabase-js": "^2.45.4",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "body-parser": "^1.19.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "express": "^4.17.1",
    "lucide-react": "^0.439.0",
    "qrcode.react": "^4.0.1",
    "react": "^18.3.1",
    "react-datepicker": "^7.3.0",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.26.1",
    "react-scripts": "5.0.1",
    "stripe": "^8.191.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.10",
    "tailwindcss-animate": "^1.0.7",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "server": "node server/server.js",
    "dev": "concurrently \"npm run server\" \"cross-env PORT=$REACT_APP_PORT npm start\""
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "concurrently": "^6.2.1",
    "cross-env": "^7.0.3"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{js,jsx}',
    './components/**/*.{js,jsx}',
    './app/**/*.{js,jsx}',
    './src/**/*.{js,jsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Header from './components/Header';
import { CampgroundProvider } from './context/CampgroundContext';
import CampgroundKiosk from './components/CampgroundKiosk';
import CheckIn from './components/CheckIn';
import MakeReservation from './components/MakeReservation';
import PayForStay from './components/PayForStay';
import ManageReservation from './components/ManageReservation';
import CheckOut from './components/CheckOut';
import PurchaseExtras from './components/PurchaseExtras';
import SiteAvailability from './components/SiteAvailability';

function App() {
  return (
    <CampgroundProvider>
    <Router>
      <div className="App">
        <Header />
        <Routes>
          <Route path="/" element={<CampgroundKiosk />} />
          <Route path="/check-in" element={<CheckIn />} />
          <Route path="/make-reservation" element={<MakeReservation />} />
          <Route path="/pay-for-stay" element={<PayForStay />} />
          <Route path="/manage-reservation" element={<ManageReservation />} />
          <Route path="/check-out" element={<CheckOut />} />
          <Route path="/purchase-extras" element={<PurchaseExtras />} />
          <Route path="/site-availability" element={<SiteAvailability />} />
        </Routes>
      </div>
    </Router>
    </CampgroundProvider>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;
 
    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;
 
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
 
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
 
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
 
    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;
 
    --ring: 215 20.2% 65.1%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;
 
    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;
 
    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;
 
    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;
 
    --border: 216 34% 17%;
    --input: 216 34% 17%;
 
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;
 
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
 
    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;
 
    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;
 
    --ring: 216 34% 17%;
 
    --radius: 0.5rem;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: server/server.js
================
// File: server/server.js

const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
require('dotenv').config();

const app = express();

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Serve static files from the React app
app.use(express.static(path.join(__dirname, '../build')));

// Import routes
const paymentRoutes = require('./routes/paymentRoutes');

// Use routes
app.use('/api', paymentRoutes);

// The "catchall" handler: for any request that doesn't
// match one above, send back React's index.html file.
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../build/index.html'));
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

================
File: src/config/appConfig.js
================
// src/config/appConfig.js

const config = {
  stripe: {
    publishableKey: process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY || 'pk_test_your_publishable_key',
    currency: 'NZD',
  },
  api: {
    baseUrl: process.env.NODE_ENV === 'production' ? '' : process.env.REACT_APP_API_URL || 'http://localhost:3003',
    endpoints: {
      createPaymentIntent: '/api/create-payment-intent',
      getAvailableSites: '/api/available-sites',
    }
  },
  campground: {
    
    siteTypes: [
      {
        id: 'powered',
        name: 'Powered Site',
        icon: 'Zap',
        requiresSiteSelection: true,
        limitedAvailability: true,
        sites: [
          { id: 'P1', number: 'A1' },
          { id: 'P2', number: 'A2' },
          { id: 'P3', number: 'B1' },
          { id: 'P4', number: 'B2' },
          { id: 'P5', number: 'C1' },
          { id: 'P6', number: 'C2' },
          { id: 'P7', number: 'D1' },
          { id: 'P8', number: 'D2' },
          { id: 'P9', number: 'E1' },
          { id: 'P10', number: 'E2' },
        ],
        pricing: {
          basePrice: 20,
          extraGuestPrice: 5,
          baseGuests: 2
        }
      },
      {
        id: 'unpowered',
        name: 'Unpowered Site',
        icon: 'Tent',
        requiresSiteSelection: false,
        limitedAvailability: false,
        totalSites: 20,
        pricing: {
          basePrice: 10,
          extraGuestPrice: 5,
          baseGuests: 2
        }
      },
      // You can easily add more site types here
      /*{
        id: 'cabin',
        name: 'Cabin',
        icon: 'Home',
        requiresSiteSelection: true,
        limitedAvailability: true,
        sites: [
          { id: 'C1', number: 'Cabin 1' },
          { id: 'C2', number: 'Cabin 2' },
          { id: 'C3', number: 'Cabin 3' },
        ],
        pricing: {
          basePrice: 50,
          extraGuestPrice: 10,
          baseGuests: 4
        }
      }*/
    ],
    additionalServices: [
      { id: 1, name: 'Dump Station', price: 5.00, allowMultiple: true },
      { id: 4, name: 'Rubbish Bag and Disposal', price: 10.00, allowMultiple: true },
    ],
    rules: [
      "Check-out time is 11 AM.",
      "Quiet hours are from 10 PM to 9 AM.",
      "Keep your campsite clean and free of litter.",
      "No Fires. BBQ use is allowed.",
      "Pets must be leashed at all times.",
      "Please pick up after your pets.",
      "All rubbish must be taken with you. Or purchase a rubbish bag from us.",
    ],
    exampleReservations: [
      { id: 1, name: 'John Doe', email: 'john@example.com', phone: '123-456-7890', siteNumber: 'A1', checkInDate: '2024-09-10' },
      { id: 2, name: 'Jane Doe', email: 'jane@example.com', phone: '098-765-4321', siteNumber: 'B2', checkInDate: '2024-09-10' },
      { id: 3, name: 'Bob Smith', email: 'bob@example.com', phone: '111-222-3333', siteNumber: 'C3', checkInDate: '2024-09-11' },
    ],
  },

};

export default config;

================
File: src/components/CampgroundKiosk.js
================
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { QRCodeSVG } from 'qrcode.react';
import { 
  Calendar, 
  CheckCircle, 
  Settings, 
  ShoppingCart,
  CreditCard, 
  LogOut,
  Phone,
  Mail,
  Smartphone
} from 'lucide-react';

const CampgroundKiosk = () => {
  const navigate = useNavigate();

  const kioskOptions = [
    { 
      id: 1, 
      label: 'Make Reservation', 
      description: 'I do not already have a reservation and need to make one now.',
      path: '/make-reservation',
      icon: Calendar
    },
    { 
      id: 2, 
      label: 'Check In', 
      description: 'I already have a reservation and just need to let you know I have arrived.',
      path: '/check-in',
      icon: CheckCircle
    },
    { 
      id: 3, 
      label: 'Manage Reservation', 
      description: 'I already have a reservation and need to make a change.',
      path: '/manage-reservation',
      icon: Settings
    },
    { 
      id: 4, 
      label: 'Purchase Extras', 
      description: 'I want to purchase additional items or services for my stay.',
      path: '/purchase-extras',
      icon: ShoppingCart
    },
    { 
      id: 5, 
      label: 'Pay For Past Stay', 
      description: 'I was unable to make a reservation and need to pay for a previous night\'s stay.',
      path: '/pay-for-stay',
      icon: CreditCard
    },
    { 
      id: 6, 
      label: 'Check Out', 
      description: 'I have completed my stay and am now leaving.',
      path: '/check-out',
      icon: LogOut
    },
  ];

  const handleOptionSelect = (path) => {
    navigate(path);
  };

  // Get the current URL of the site
  const currentUrl = window.location.origin;

  return (
    <div className="container mx-auto mt-10 px-4 pb-10">
      <Card className="w-full max-w-7xl mx-auto">
        <CardContent className="p-6">
          <div className="flex flex-col lg:flex-row">
            {/* Main options on the left */}
            <div className="lg:w-2/3 lg:pr-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {kioskOptions.map((option) => (
                  <Button
                    key={option.id}
                    onClick={() => handleOptionSelect(option.path)}
                    className="h-auto p-4 flex flex-col items-center text-center bg-white text-blue-600 hover:bg-blue-50 border-2 border-blue-600 rounded-lg transition-all duration-200 shadow-md hover:shadow-lg"
                  >
                    <option.icon size={36} className="mb-2" />
                    <span className="text-xl font-bold mb-1">{option.label}</span>
                    <span className="text-xs text-gray-600">{option.description}</span>
                  </Button>
                ))}
              </div>
            </div>

            {/* QR code and contact info on the right */}
            <div className="lg:w-1/3 mt-8 lg:mt-0 lg:pl-6 lg:border-l border-gray-200">
              <div className="mb-2">
                <h2 className="text-xl font-semibold text-center mb-4">Use Your Own Device</h2>
                <div className="flex flex-col items-center">
                  <Smartphone size={48} className="text-blue-600 mb-4" />
                  <p className="text-center mb-4">
                    Scan this QR code to access the campground services on your own device:
                  </p>
                  <QRCodeSVG 
                    value={currentUrl}
                    size={160}
                    bgColor={"#ffffff"}
                    fgColor={"#000000"}
                    level={"L"}
                    includeMargin={false}
                    className="mb-4"
                  />
                </div>
              </div>
              
              <div className="mt-2">
                <h2 className="text-xl font-semibold text-center mb-4">Need Assistance?</h2>
                <div className="flex flex-col items-center space-y-4">
                  <div className="flex items-center">
                    <Phone className="text-blue-600 mr-2" size={20} />
                    <span>Call us: (020) 4076-9301</span>
                  </div>
                  <div className="flex items-center">
                    <Mail className="text-blue-600 mr-2" size={20} />
                    <span>Email: contact@thehurunuihotel.co.nz</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default CampgroundKiosk;

================
File: src/components/CheckIn.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { CheckCircle, Search, Info, MapPin, AlertTriangle, Lock, Loader, Check } from 'lucide-react';
import CommonLayout from './CommonLayout';
import useForm from '../hooks/useForm';
import { useCampgroundContext } from '../context/CampgroundContext';
import { mockApi } from '../services/mockApi';

const CheckIn = () => {
  const navigate = useNavigate();
  const { rules } = useCampgroundContext();
  const [step, setStep] = useState('search');
  const { formData, handleInputChange } = useForm({
    searchTerm: '',
    verificationCode: '',
  });
  const [matchingReservations, setMatchingReservations] = useState([]);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [hasSearched, setHasSearched] = useState(false);
  const [isVerified, setIsVerified] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleSearch = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setHasSearched(false);
    
    try {
      const matches = await mockApi.searchReservations(formData.searchTerm);
      setMatchingReservations(matches);

      if (matches.length === 1) {
        const reservationId = String(matches[0].id).trim();
        const searchTerm = formData.searchTerm.trim();
        
        if (reservationId === searchTerm) {
          setSelectedReservation(matches[0]);
          setIsVerified(true);
          setStep('confirm');
        } else {
          setStep('select');
        }
      } else if (matches.length > 1) {
        setStep('select');
      } else {
        setStep('search');
      }
      
      setHasSearched(true);
    } catch (error) {
      console.error('Error searching for reservations:', error);
      setMatchingReservations([]);
      setStep('search');
      setHasSearched(true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReservationSelect = (reservation) => {
    setSelectedReservation(reservation);
    setStep('verify');
  };

  const handleVerify = () => {
    if (formData.verificationCode.trim() !== '') {
      setIsVerified(true);
      setStep('confirm');
    } else {
      alert('Please enter a valid verification code.');
    }
  };

  const handleConfirmCheckIn = () => {
    // Here you would typically send a request to your backend to mark the reservation as checked in
    console.log('Checking in reservation:', selectedReservation);
    setStep('info');
  };

  const renderSearchStep = () => (
    <form onSubmit={handleSearch} className="space-y-4">
      <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <Info className="h-6 w-6 text-blue-500 mr-2" />
          </div>
          <div>
            <p className="font-bold">Verification Process</p>
            <p className="text-sm">
              If you provide your reservation number, you can proceed directly to check-in. 
              Otherwise, for security purposes, you'll be asked to enter a verification code 
              sent to your registered email or phone number.
            </p>
          </div>
        </div>
      </div>
      <div>
        <label htmlFor="searchTerm" className="block text-sm font-medium text-gray-700 mb-1">
          Reservation Number, Last Name, Phone Number, or Email
        </label>
        <Input
          type="text"
          id="searchTerm"
          name="searchTerm"
          value={formData.searchTerm}
          onChange={handleInputChange}
          className="w-full"
          placeholder="Enter your reservation details"
          required
        />
      </div>
      <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        {isLoading ? <Loader className="animate-spin mr-2" /> : <Search className="mr-2 h-4 w-4" />}
        {isLoading ? 'Searching...' : 'Search Reservation'}
      </Button>
      {isLoading ? (
        <div className="mt-4 text-center text-gray-600">
          Searching for reservations...
        </div>
      ) : hasSearched && matchingReservations.length === 0 && (
        <div className="mt-4 p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700">
          <div className="flex">
            <div className="py-1">
              <AlertTriangle className="h-6 w-6 text-yellow-500 mr-2" />
            </div>
            <div>
              <p className="font-bold">No reservation found</p>
              <p>We couldn't find a reservation matching your search. Please check your details and try again.</p>
              <p className="mt-2">If you need assistance, please contact our support team or visit the campground office.</p>
            </div>
          </div>
        </div>
      )}
    </form>
  );

  const renderSelectStep = () => (
    <div className="space-y-4">
      <h3 className="font-semibold text-lg">Select Your Reservation</h3>
      {matchingReservations.map(reservation => (
        <Button
          key={reservation.id}
          onClick={() => handleReservationSelect(reservation)}
          className="w-full justify-start text-left bg-white text-blue-600 border border-blue-600 hover:bg-blue-50"
        >
          <div>
            <p className="font-semibold">{reservation.name}</p>
            <p className="text-sm">Site: {reservation.siteNumber}, Check-in: {reservation.checkInDate}</p>
          </div>
        </Button>
      ))}
      <Button 
        onClick={() => {
          setStep('search');
          setHasSearched(false);
        }} 
        variant="outline" 
        className="w-full mt-4"
      >
        Back to Search
      </Button>
    </div>
  );

  const renderVerifyStep = () => (
    <div className="space-y-4">
      <div className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <Lock className="mr-2 h-5 w-5 text-blue-500" />
          </div>
          <div>
            <p className="font-bold">Verify Your Identity</p>
            <p className="text-sm">To protect your reservation, please enter the verification code sent to your email or phone.</p>
          </div>
        </div>
      </div>
      <Input
        type="text"
        name="verificationCode"
        value={formData.verificationCode}
        onChange={handleInputChange}
        placeholder="Enter verification code"
        className="w-full"
        required
      />
      <Button onClick={handleVerify} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        Verify
      </Button>
    </div>
  );

  const renderConfirmStep = () => (
    <div className="space-y-4">
      <h3 className="font-semibold text-lg">Confirm Check-In</h3>
      <div className="bg-gray-100 p-4 rounded-md">
        <p><strong>Name:</strong> {selectedReservation.name}</p>
        <p><strong>Site Number:</strong> {selectedReservation.siteNumber}</p>
        <p><strong>Check-in Date:</strong> {selectedReservation.checkInDate}</p>
        <p><strong>Email:</strong> {selectedReservation.email}</p>
        <p><strong>Phone:</strong> {selectedReservation.phone}</p>
      </div>
      <Button 
        onClick={handleConfirmCheckIn}
        className="w-full bg-green-600 hover:bg-green-700 text-white"
      >
        <CheckCircle className="mr-2 h-4 w-4" /> Confirm Check-In
      </Button>
      <Button 
        onClick={() => setStep('select')} 
        variant="outline" 
        className="w-full"
      >
        Back to Reservation Selection
      </Button>
    </div>
  );

  const renderInfoStep = () => (
    <div className="space-y-6">
      <div>
        <h3 className="font-semibold text-lg flex items-center mb-2">
          <MapPin className="mr-2 h-5 w-5 text-blue-600" />
          Your Campsite Information
        </h3>
        <div className="bg-blue-50 p-4 rounded-md">
          <p><strong>Site Number:</strong> {selectedReservation.siteNumber}</p>
          <p><strong>Location:</strong> [Insert directions or map here]</p>
          <p><strong>Amenities:</strong> [List site-specific amenities]</p>
        </div>
      </div>
      <div>
        <h3 className="font-semibold text-lg flex items-center mb-2">
          <Info className="mr-2 h-5 w-5 text-blue-600" />
          Campground Rules
        </h3>
        <ul className="list-disc pl-5 space-y-2">
          {rules.map((rule, index) => (
            <li key={index}>{rule}</li>
          ))}
        </ul>
      </div>
      <p className="text-sm text-gray-600">
        For more information or assistance, please visit the campground office.
      </p>
      <Button 
        onClick={() => navigate('/')}
        className="w-full bg-blue-600 hover:bg-blue-700 text-white"
      >
        Complete Check-In
      </Button>
    </div>
  );

  const renderContent = () => {
    switch (step) {
      case 'search':
        return renderSearchStep();
      case 'select':
        return renderSelectStep();
      case 'verify':
        return renderVerifyStep();
      case 'confirm':
        return isVerified ? renderConfirmStep() : renderVerifyStep();
      case 'info':
        return renderInfoStep();
      default:
        return null;
    }
  };

  const renderSidebar = () => {
    const steps = [
      { key: 'search', label: 'Find your reservation' },
      { key: 'select', label: 'Select your reservation' },
      { key: 'verify', label: 'Verify identity (if needed)' },
      { key: 'confirm', label: 'Confirm check-in' },
      { key: 'info', label: 'Get campsite information' }
    ];
  
    const getStepIndex = (stepKey) => steps.findIndex(s => s.key === stepKey);
    const currentStepIndex = getStepIndex(step);
  
    return (
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Check-In Process</h3>
        <ul className="space-y-2">
          {steps.map((s, index) => (
            <li key={s.key} className={`flex items-center space-x-2 ${step === s.key ? 'text-blue-600 font-semibold' : ''}`}>
              <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                currentStepIndex > index
                  ? 'bg-blue-100 border-blue-600 text-blue-600' 
                  : step === s.key 
                    ? 'border-blue-600' 
                    : 'border-gray-300'
              }`}>
                {currentStepIndex > index ? (
                  <Check size={16} />
                ) : (
                  index + 1
                )}
              </div>
              <span>{s.label}</span>
            </li>
          ))}
        </ul>
        {selectedReservation && (
          <div className="mt-6 pt-6 border-t border-gray-200">
            <h4 className="font-semibold mb-2">Selected Reservation:</h4>
            <p><strong>Guest:</strong> {selectedReservation.name}</p>
            <p><strong>Site:</strong> {selectedReservation.siteNumber}</p>
            <p><strong>Check-in:</strong> {selectedReservation.checkInDate}</p>
          </div>
        )}
      </div>
    );
  };

  return (
    <CommonLayout 
      title={step === 'info' ? 'Welcome to Our Campground!' : 'Check In'}
      icon={CheckCircle}
      width="max-w-7xl"
      sidebar={renderSidebar()}
    >
      <Card>
        <CardContent className="pt-6">
          {renderContent()}
        </CardContent>
      </Card>
    </CommonLayout>
  );
};

export default CheckIn;

================
File: src/components/CheckOut.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { LogOut, AlertTriangle, Lock, Search, Info, Loader, Check } from 'lucide-react';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import CommonLayout from './CommonLayout';
import CheckoutForm from './CheckoutForm';
import ExtrasSelector from './ExtrasSelector';
import useForm from '../hooks/useForm';
import { useCampgroundContext } from '../context/CampgroundContext';
import { mockApi } from '../services/mockApi';

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);

const CheckOut = () => {
  const navigate = useNavigate();
  const { additionalServices } = useCampgroundContext();
  const [step, setStep] = useState('search');
  const { formData, handleInputChange } = useForm({
    searchTerm: '',
    verificationCode: '',
  });
  const [matchingReservations, setMatchingReservations] = useState([]);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [selectedExtras, setSelectedExtras] = useState({});
  const [totalPrice, setTotalPrice] = useState(0);
  const [hasSearched, setHasSearched] = useState(false);
  const [isVerified, setIsVerified] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleSearch = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setHasSearched(false);
    
    try {
      const matches = await mockApi.searchReservations(formData.searchTerm);
      setMatchingReservations(matches);

      if (matches.length === 1) {
        const reservationId = String(matches[0].id).trim();
        const searchTerm = formData.searchTerm.trim();
        
        if (reservationId === searchTerm) {
          setSelectedReservation(matches[0]);
          setIsVerified(true);
          setStep('confirm');
        } else {
          setStep('select');
        }
      } else if (matches.length > 1) {
        setStep('select');
      } else {
        setStep('search');
      }
      
      setHasSearched(true);
    } catch (error) {
      console.error('Error searching for reservations:', error);
      setMatchingReservations([]);
      setStep('search');
      setHasSearched(true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReservationSelect = (reservation) => {
    setSelectedReservation(reservation);
    setStep('verify');
  };

  const handleVerify = () => {
    if (formData.verificationCode.trim() !== '') {
      setIsVerified(true);
      setStep('confirm');
    } else {
      alert('Please enter a valid verification code.');
    }
  };

  const handleExtrasChange = (updatedExtras) => {
    setSelectedExtras(updatedExtras);
  };

  const calculateTotal = useCallback(() => {
    if (!selectedReservation) return 0;

    const baseCharge = 200; // You might want to calculate this based on the reservation details
    const extrasTotal = Object.values(selectedExtras).reduce((sum, item) => sum + item.price * item.quantity, 0);
    return baseCharge + extrasTotal;
  }, [selectedReservation, selectedExtras]);

  useEffect(() => {
    const total = calculateTotal();
    setTotalPrice(total);
  }, [calculateTotal]);

  const handleConfirmCheckout = () => {
    const total = calculateTotal();
    setTotalPrice(total);
    setStep('payment');
  };

  const handlePaymentSuccess = (paymentIntent) => {
    alert('Checkout successful! Thank you for your stay.');
    navigate('/');
  };

  const handlePaymentError = (errorMessage) => {
    alert(`Payment failed: ${errorMessage}. Please try again or contact support.`);
  };

  const renderSearchStep = () => (
    <form onSubmit={handleSearch} className="space-y-4">
      <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <Info className="h-6 w-6 text-blue-500 mr-2" />
          </div>
          <div>
            <p className="font-bold">Verification Process</p>
            <p className="text-sm">
              If you provide your reservation number, you can proceed directly to check-out. 
              Otherwise, for security purposes, you'll be asked to enter a verification code 
              sent to your registered email or phone number.
            </p>
          </div>
        </div>
      </div>
      <div>
        <label htmlFor="searchTerm" className="block text-sm font-medium text-gray-700 mb-1">
          Reservation Number, Last Name, Phone Number, or Email
        </label>
        <Input
          type="text"
          id="searchTerm"
          name="searchTerm"
          value={formData.searchTerm}
          onChange={handleInputChange}
          className="w-full"
          placeholder="Enter your reservation details"
          required
        />
      </div>
      <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        {isLoading ? <Loader className="animate-spin mr-2" /> : <Search className="mr-2 h-4 w-4" />}
        {isLoading ? 'Searching...' : 'Search Reservation'}
      </Button>
      {isLoading ? (
        <div className="mt-4 text-center text-gray-600">
          Searching for reservations...
        </div>
      ) : hasSearched && matchingReservations.length === 0 && (
        <div className="mt-4 p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700">
          <div className="flex">
            <AlertTriangle className="h-6 w-6 text-yellow-500 mr-2" />
            <div>
              <p className="font-bold">No reservation found</p>
              <p>We couldn't find a reservation matching your search. Please check your details and try again.</p>
            </div>
          </div>
        </div>
      )}
    </form>
  );

  const renderSelectStep = () => (
    <div className="space-y-4">
      <h3 className="font-semibold text-lg">Select Your Reservation</h3>
      {matchingReservations.map(reservation => (
        <Button
          key={reservation.id}
          onClick={() => handleReservationSelect(reservation)}
          className="w-full justify-start text-left bg-white text-blue-600 border border-blue-600 hover:bg-blue-50"
        >
          <div>
            <p className="font-semibold">{reservation.name}</p>
            <p className="text-sm">Site: {reservation.siteNumber}, Check-in: {reservation.checkInDate}</p>
          </div>
        </Button>
      ))}
      <Button 
        onClick={() => {
          setStep('search');
          setHasSearched(false);
        }} 
        variant="outline" 
        className="w-full mt-4"
      >
        Back to Search
      </Button>
    </div>
  );

  const renderVerifyStep = () => (
    <div className="space-y-4">
      <div className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <Lock className="h-6 w-6 text-blue-500 mr-4" />
          </div>
          <div>
            <p className="font-bold">Verify Your Identity</p>
            <p className="text-sm">To protect your reservation, please enter the verification code sent to your email or phone.</p>
          </div>
        </div>
      </div>
      <Input
        type="text"
        name="verificationCode"
        value={formData.verificationCode}
        onChange={handleInputChange}
        placeholder="Enter verification code"
        className="w-full"
        required
      />
      <Button onClick={handleVerify} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        Verify
      </Button>
    </div>
  );

  const renderConfirmStep = () => (
    <div className="space-y-4">
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="font-semibold mb-2">Reservation Details:</h3>
        <p><strong>Guest:</strong> {selectedReservation.name}</p>
        <p><strong>Site:</strong> {selectedReservation.siteNumber}</p>
        <p><strong>Check-in Date:</strong> {selectedReservation.checkInDate}</p>
        <p><strong>Email:</strong> {selectedReservation.email}</p>
        <p><strong>Phone:</strong> {selectedReservation.phone}</p>
      </div>
      <div>
        <h3 className="font-semibold mb-2">Additional Services:</h3>
        <ExtrasSelector
          selectedExtras={selectedExtras}
          onExtrasChange={handleExtrasChange}
          availableExtras={additionalServices}
        />
      </div>
      <Button onClick={handleConfirmCheckout} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        Confirm and Proceed to Payment
      </Button>
    </div>
  );

  const renderPaymentStep = () => (
    <div className="space-y-4">
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="font-semibold mb-2">Checkout Summary:</h3>
        <p><strong>Guest:</strong> {selectedReservation.name}</p>
        <p><strong>Site:</strong> {selectedReservation.siteNumber}</p>
        <p><strong>Check-in Date:</strong> {selectedReservation.checkInDate}</p>
        <p><strong>Base Charge:</strong> $200.00</p>
        {Object.values(selectedExtras).map(extra => (
          <p key={extra.id}><strong>{extra.name}:</strong> ${(extra.price * extra.quantity).toFixed(2)}</p>
        ))}
        <p className="font-bold mt-2">Total Due: ${totalPrice.toFixed(2)}</p>
      </div>
      <Elements stripe={stripePromise}>
        <CheckoutForm 
          totalAmount={totalPrice}
          onPaymentSuccess={handlePaymentSuccess}
          onPaymentError={handlePaymentError}
        />
      </Elements>
    </div>
  );

  const renderContent = () => {
    switch (step) {
      case 'search':
        return renderSearchStep();
      case 'select':
        return renderSelectStep();
      case 'verify':
        return renderVerifyStep();
      case 'confirm':
        return isVerified ? renderConfirmStep() : renderVerifyStep();
      case 'payment':
        return renderPaymentStep();
      default:
        return null;
    }
  };

  const renderSidebar = () => {
    const steps = [
      { key: ['search', 'select'], label: 'Find your reservation' },
      { key: 'verify', label: 'Verify identity (if needed)' },
      { key: 'confirm', label: 'Confirm details and add extras' },
      { key: 'payment', label: 'Complete payment' }
    ];
  
    const getStepIndex = (currentStep) => steps.findIndex(s => 
      Array.isArray(s.key) ? s.key.includes(currentStep) : s.key === currentStep
    );
    const currentStepIndex = getStepIndex(step);
  
    return (
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Check-Out Process</h3>
        <ul className="space-y-2">
          {steps.map((s, index) => {
            const isCurrentStep = Array.isArray(s.key) ? s.key.includes(step) : s.key === step;
            return (
              <li key={Array.isArray(s.key) ? s.key.join('-') : s.key} 
                  className={`flex items-center space-x-2 ${isCurrentStep ? 'text-blue-600 font-semibold' : ''}`}>
                <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                  currentStepIndex > index
                    ? 'bg-blue-100 border-blue-600 text-blue-600' 
                    : isCurrentStep 
                      ? 'border-blue-600' 
                      : 'border-gray-300'
                }`}>
                  {currentStepIndex > index ? (
                    <Check size={16} />
                  ) : (
                    index + 1
                  )}
                </div>
                <span>{s.label}</span>
              </li>
            );
          })}
        </ul>
        {selectedReservation && isVerified && (
          <div className="mt-6 pt-6 border-t border-gray-200">
            <h4 className="font-semibold mb-2">Current Reservation:</h4>
            <p><strong>Guest:</strong> {selectedReservation.name}</p>
            <p><strong>Site:</strong> {selectedReservation.siteNumber}</p>
            <p><strong>Check-in:</strong> {selectedReservation.checkInDate}</p>
            {step === 'payment' && <p className="font-bold mt-2">Total: ${totalPrice.toFixed(2)}</p>}
          </div>
        )}
      </div>
    );
  };

  return (
    <CommonLayout 
      title="Check Out"
      icon={LogOut}
      width="max-w-7xl"
      sidebar={renderSidebar()}
    >
      <Card>
        <CardContent className="pt-6">
          {renderContent()}
        </CardContent>
      </Card>
    </CommonLayout>
  );
};

export default CheckOut;

================
File: src/components/CheckoutForm.js
================
import React, { useState } from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import { Button } from './ui/button';
import { CreditCard } from 'lucide-react';
import config from '../config/appConfig';
import { mockApi } from '../services/mockApi';

const CheckoutForm = ({ totalAmount, onPaymentSuccess, onPaymentError }) => {
  const stripe = useStripe();
  const elements = useElements();
  const [isProcessing, setIsProcessing] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    setErrorMessage('');

    if (!stripe || !elements) {
      setErrorMessage('Stripe has not loaded. Please try again later.');
      return;
    }

    setIsProcessing(true);

    try {
      const { clientSecret } = await mockApi.createPaymentIntent(
        Math.round(totalAmount * 100), // amount in cents
        config.stripe.currency
      );

      const result = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement),
          billing_details: {
            // You can add billing details here if needed
          },
        }
      });

      if (result.error) {
        throw new Error(result.error.message);
      } else {
        if (result.paymentIntent.status === 'succeeded') {
          onPaymentSuccess(result.paymentIntent);
        } else {
          throw new Error('Payment was not successful. Please try again.');
        }
      }
    } catch (error) {
      setErrorMessage(error.message || 'An error occurred while processing your payment. Please try again.');
      onPaymentError(error.message);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="border rounded-md p-3">
        <CardElement options={{
          style: {
            base: {
              fontSize: '16px',
              color: '#424770',
              '::placeholder': {
                color: '#aab7c4',
              },
            },
            invalid: {
              color: '#9e2146',
            },
          },
        }} />
      </div>
      {errorMessage && (
        <div className="text-red-500 text-sm">{errorMessage}</div>
      )}
      <Button 
        type="submit" 
        disabled={!stripe || isProcessing} 
        className="w-full mt-4 bg-blue-600 hover:bg-blue-700 text-white flex items-center justify-center"
      >
        <CreditCard className="mr-2" size={20} />
        {isProcessing ? 'Processing...' : `Pay ${config.stripe.currency} $${totalAmount.toFixed(2)}`}
      </Button>
    </form>
  );
};

export default CheckoutForm;

================
File: src/components/CommonLayout.js
================
import React from 'react';
import { Card, CardContent } from './ui/card';

const CommonLayout = ({ title, icon: Icon, children, sidebar, width = "max-w-7xl" }) => {
  return (
    <div className={`container mx-auto mt-10 px-4 pb-10 ${width}`}>
      <div className="flex flex-col lg:flex-row">
        <div className="lg:w-2/3 lg:pr-6 lg:border-r border-gray-200">
          <div className="flex items-center mb-6">
            {Icon && <Icon size={48} className="text-blue-600 mr-4" />}
            <h2 className="text-2xl font-bold">{title}</h2>
          </div>
          <Card>
            <CardContent className="pt-6">
              {children}
            </CardContent>
          </Card>
        </div>
        <div className="lg:w-1/3 mt-6 lg:mt-0 lg:pl-6">
          {sidebar}
        </div>
      </div>
    </div>
  );
};

export default CommonLayout;

================
File: src/components/DateSelection.js
================
import React from 'react';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { Card, CardContent } from './ui/card';
import { Input } from './ui/input';
import { Calendar } from 'lucide-react';

const DateSelection = ({ startDate, nights, handleStartDateChange, handleNightsChange }) => {
  const endDate = startDate && new Date(startDate.getTime() + nights * 24 * 60 * 60 * 1000);

  return (
    <Card className="w-full mx-auto">
      <CardContent className="p-6">
        <h3 className="text-lg font-semibold mb-4">Refine Your Stay</h3>
        <div className="space-y-4">
          <div className="flex flex-row space-x-4">
            <div className="flex-grow">
              <label htmlFor="check-in-date" className="block text-sm font-medium text-gray-700 mb-1">
                Check-in Date
              </label>
              <DatePicker
                id="check-in-date"
                selected={startDate}
                onChange={handleStartDateChange}
                dateFormat="dd/MM/yyyy"
                minDate={new Date()}
                className="w-full p-2 border border-gray-300 rounded-md"
              />
            </div>
            <div className="w-1/3">
              <label htmlFor="nights" className="block text-sm font-medium text-gray-700 mb-1">
                Nights
              </label>
              <Input
                type="number"
                id="nights"
                value={nights}
                onChange={(e) => handleNightsChange(parseInt(e.target.value) || 1)}
                min="1"
                className="w-full"
              />
            </div>
          </div>
          {startDate && nights > 0 && (
            <div className="bg-gray-100 p-3 rounded-md">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-sm font-medium">Check-in:</p>
                  <p className="text-sm">{startDate.toLocaleDateString()}</p>
                </div>
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm font-medium">Check-out:</p>
                  <p className="text-sm">{endDate.toLocaleDateString()}</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default DateSelection;

================
File: src/components/ExtrasSelector.js
================
import React from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Plus, Minus } from 'lucide-react';

const ExtrasSelector = ({ selectedExtras, onExtrasChange, availableExtras = [] }) => {
  const handleServiceToggle = (service) => {
    onExtrasChange(prevExtras => {
      const updatedExtras = { ...prevExtras };
      if (updatedExtras[service.id]) {
        delete updatedExtras[service.id];
      } else {
        updatedExtras[service.id] = { ...service, quantity: 1 };
      }
      return updatedExtras;
    });
  };

  const handleServiceQuantityChange = (service, change) => {
    onExtrasChange(prevExtras => {
      const updatedExtras = { ...prevExtras };
      if (updatedExtras[service.id]) {
        const newQuantity = Math.max(0, updatedExtras[service.id].quantity + change);
        if (newQuantity === 0) {
          delete updatedExtras[service.id];
        } else {
          updatedExtras[service.id] = { ...updatedExtras[service.id], quantity: newQuantity };
        }
      } else if (change > 0) {
        updatedExtras[service.id] = { ...service, quantity: 1 };
      }
      return updatedExtras;
    });
  };

  if (!availableExtras || availableExtras.length === 0) {
    return <p>No additional services available.</p>;
  }

  return (
    <div className="space-y-4">
      {availableExtras.map((service) => (
        <div key={service.id} className="flex justify-between items-center">
          <span className="text-sm sm:text-base">{service.name} - ${service.price.toFixed(2)}</span>
          {selectedExtras[service.id] ? (
            <div className="flex items-center">
              <Button
                type="button"
                onClick={() => handleServiceQuantityChange(service, -1)}
                className="px-3 py-2"
              >
                <Minus size={16} />
              </Button>
              <Input
                type="number"
                value={selectedExtras[service.id].quantity}
                onChange={(e) => handleServiceQuantityChange(service, parseInt(e.target.value) - selectedExtras[service.id].quantity)}
                className="mx-2 w-16 text-center"
                readOnly
              />
              <Button
                type="button"
                onClick={() => handleServiceQuantityChange(service, 1)}
                className="px-3 py-2"
              >
                <Plus size={16} />
              </Button>
            </div>
          ) : (
            <Button
              type="button"
              onClick={() => handleServiceToggle(service)}
              variant="outline"
              className="text-xs sm:text-sm"
            >
              Add
            </Button>
          )}
        </div>
      ))}
    </div>
  );
};

export default ExtrasSelector;

================
File: src/components/Header.js
================
import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { Button } from './ui/button';
import { Map } from 'lucide-react';

const Header = () => {
  const navigate = useNavigate();
  const location = useLocation();

  const isMainPage = location.pathname === '/';
  const isSiteAvailabilityPage = location.pathname === '/site-availability';

  return (
    <header className="bg-blue-600 text-white">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Hurunui Hotel Campsite</h1>
        <div className="flex space-x-4">
          <Button 
            onClick={() => navigate('/site-availability')} 
            variant="secondary"
            className={`bg-white text-blue-600 hover:bg-blue-100 ${isSiteAvailabilityPage ? 'hidden' : ''}`}
          >
            <Map size={20} className="mr-2" />
            Site Availability
          </Button>
          {!isMainPage && (
            <Button 
              onClick={() => navigate('/')} 
              variant="secondary"
              className="bg-white text-blue-600 hover:bg-blue-100"
            >
              Main Menu
            </Button>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;

================
File: src/components/MakeReservation.js
================
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from './ui/button';
import { ArrowLeft, ArrowRight, Calendar, Check } from 'lucide-react';
import CommonLayout from './CommonLayout';
import useForm from '../hooks/useForm';
import { useCampgroundContext } from '../context/CampgroundContext';
import Step1 from './reservations/Step1';
import Step2 from './reservations/Step2';
import Step3 from './reservations/Step3';
import Step4 from './reservations/Step4';
import Step5 from './reservations/Step5';
import Step6 from './reservations/Step6';
import Step7 from './reservations/Step7';
import Step8 from './reservations/Step8';
import { getSiteTypes, getAvailableSites, createReservation, getAdditionalServices } from '../services/api';
import { addDays, format } from 'date-fns';

const MakeReservation = () => {
  const navigate = useNavigate();
  const { siteTypes, rules, additionalServices, updateContext } = useCampgroundContext();
  const [step, setStep] = useState(1);
  const { formData, handleInputChange, setField } = useForm({
    siteType: '',
    startDate: null,
    nights: 1,
    maxNights: 14,
    siteNumber: '',
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: '',
    adultCount: 2,
    childCount: 0,
  });
  const [selectedExtras, setSelectedExtras] = useState({});
  const [totalPrice, setTotalPrice] = useState(0);
  const [availableSites, setAvailableSites] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const dataFetchedRef = useRef(false);

  useEffect(() => {
    const fetchData = async () => {
      if (dataFetchedRef.current) return;
      dataFetchedRef.current = true;

      try {
        setIsLoading(true);
        const [fetchedSiteTypes, fetchedAdditionalServices] = await Promise.all([
          getSiteTypes(),
          getAdditionalServices()
        ]);

        console.log('Fetched site types:', fetchedSiteTypes);
        console.log('Fetched additional services:', fetchedAdditionalServices);

        updateContext({
          siteTypes: fetchedSiteTypes,
          additionalServices: fetchedAdditionalServices
        });
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [updateContext]);

  useEffect(() => {
    if (formData.siteType) {
      const fetchAvailableSites = async () => {
        setIsLoading(true);
        try {
          const today = new Date();
          const thirtyDaysLater = addDays(today, 30);
          const sites = await getAvailableSites(
            format(today, 'yyyy-MM-dd'),
            format(thirtyDaysLater, 'yyyy-MM-dd'),
            formData.siteType
          );
          console.log('Fetched available sites:', sites);
          setAvailableSites(sites);
        } catch (error) {
          console.error("Error fetching available sites:", error);
          setAvailableSites([]);
        } finally {
          setIsLoading(false);
        }
      };
      fetchAvailableSites();
    }
  }, [formData.siteType]);

  const calculateTotalPrice = useCallback(() => {
    if (!formData.startDate || !formData.nights || !formData.siteType) return 0;

    const selectedSiteType = siteTypes.find(type => type.id === formData.siteType);
    if (!selectedSiteType) return 0;

    const basePrice = selectedSiteType.base_price * formData.nights;
    
    const extraAdults = Math.max(0, formData.adultCount - selectedSiteType.base_guests);
    const extraGuestPrice = extraAdults * selectedSiteType.extra_guest_price * formData.nights;
    
    const extrasPrice = Object.values(selectedExtras).reduce((total, item) => 
      total + (item.price * item.quantity), 0);

    return basePrice + extraGuestPrice + extrasPrice;
  }, [formData.startDate, formData.nights, formData.siteType, formData.adultCount, selectedExtras, siteTypes]);

  useEffect(() => {
    const total = calculateTotalPrice();
    setTotalPrice(total);
  }, [calculateTotalPrice]);

  const handleSiteTypeSelect = (typeId) => {
    console.log('Selected site type:', typeId);
    setField('siteType', typeId);
  };

  const handleDateSelect = (date) => {
    console.log('Selected date:', date);
    setField('startDate', date);
    setField('nights', 1);
  };

  const handleNightsChange = (nights) => {
    console.log('Changed nights:', nights);
    setField('nights', Math.max(1, nights));
  };

  const handleGuestCountChange = (e) => {
    const { name, value } = e.target;
    console.log('Changed guest count:', name, value);
    setField(name, Math.max(0, parseInt(value) || 0));
  };

  const handleNext = () => {
    if (step === 1 && !formData.siteType) {
      alert("Please select a site type.");
      return;
    }
    if (step === 2 && (!formData.startDate || formData.nights < 1)) {
      alert("Please select an arrival date and specify the number of nights.");
      return;
    }
    console.log('Moving to next step:', step + 1);
    setStep(step + 1);
  };

  const handlePrevious = () => {
    console.log('Moving to previous step:', step - 1);
    setStep(step - 1);
  };

  const handlePaymentSuccess = async (paymentIntent) => {
    try {
      const reservationData = {
        siteId: formData.siteNumber || null,
        siteType: formData.siteType,
        startDate: format(formData.startDate, 'yyyy-MM-dd'),
        endDate: format(addDays(formData.startDate, formData.nights - 1), 'yyyy-MM-dd'),
        firstName: formData.firstName,
        lastName: formData.lastName,
        email: formData.email,
        phoneNumber: formData.phoneNumber,
        adultCount: formData.adultCount,
        childCount: formData.childCount,
        totalPrice,
        extras: Object.values(selectedExtras)
      };
      console.log('Creating reservation with data:', reservationData);
      const result = await createReservation(reservationData);
      if (result.success) {
        console.log('Reservation created successfully');
        setStep(8);
      } else {
        throw new Error(result.error || 'Reservation creation failed');
      }
    } catch (error) {
      console.error("Error creating reservation:", error.message);
      alert(`Failed to create reservation: ${error.message}. Please try again or contact support.`);
    }
  };

  const handlePaymentError = (errorMessage) => {
    console.error('Payment failed:', errorMessage);
    alert(`Payment failed: ${errorMessage}. Please try again or contact support.`);
  };

  const renderStepContent = () => {
    if (isLoading) {
      return <p>Loading...</p>;
    }

    console.log('Rendering step:', step);
    console.log('Current form data:', formData);
    console.log('Available sites:', availableSites);

    switch(step) {
      case 1:
        return (
          <Step1 
            siteTypes={siteTypes}
            formData={formData}
            handleSiteTypeSelect={handleSiteTypeSelect}
            handleGuestCountChange={handleGuestCountChange}
          />
        );
      case 2:
        return (
          <Step2 
            formData={formData}
            availableSites={availableSites}
            handleDateSelect={handleDateSelect}
            handleNightsChange={handleNightsChange}
          />
        );
      case 3:
        return (
          <Step3
            formData={formData}
            handleInputChange={handleInputChange}
            siteTypes={siteTypes}
            availableSites={availableSites}
          />
        );
      case 4:
        return (
          <Step4
            formData={formData}
            handleInputChange={handleInputChange}
          />
        );
      case 5:
        return (
          <Step5
            selectedExtras={selectedExtras}
            setSelectedExtras={setSelectedExtras}
            availableExtras={additionalServices}
          />
        );
      case 6:
        return (
          <Step6
            formData={formData}
            selectedExtras={selectedExtras}
            totalPrice={totalPrice}
            siteTypes={siteTypes}
          />
        );
      case 7:
        return (
          <Step7
            totalPrice={totalPrice}
            onPaymentSuccess={handlePaymentSuccess}
            onPaymentError={handlePaymentError}
          />
        );
      case 8:
        return (
          <Step8
            formData={formData}
            siteTypes={siteTypes}
            rules={rules}
            onReturnToKiosk={() => navigate('/')}
          />
        );
      default:
        return null;
    }
  };

  const renderSidebar = () => (
    <div className="space-y-4">
      <h3 className="text-xl font-semibold">Reservation Process</h3>
      <ul className="space-y-2">
        {[
          "Choose site type",
          "Select dates",
          "Select specific site",
          "Enter guest details",
          "Add extras",
          "Review reservation",
          "Make payment",
          "Confirmation"
        ].map((stepName, index) => (
          <li key={index} className={`flex items-center space-x-2 ${step === index + 1 ? 'text-blue-600 font-semibold' : ''}`}>
            <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
              step > index + 1 
                ? 'bg-blue-100 border-blue-600 text-blue-600' 
                : step === index + 1 
                  ? 'border-blue-600' 
                  : 'border-gray-300'
            }`}>
              {step > index + 1 ? (
                <Check size={16} />
              ) : (
                index + 1
              )}
            </div>
            <span>{stepName}</span>
          </li>
        ))}
      </ul>
      {step !== 8 && (
        <div className="mt-6 pt-6 border-t border-gray-200">
          <h4 className="font-semibold mb-2">Reservation Summary:</h4>
          <p><strong>Site Type:</strong> {formData.siteType ? siteTypes.find(type => type.id === formData.siteType)?.name : 'Not selected'}</p>
          <p><strong>Check-in:</strong> {formData.startDate?.toLocaleDateString()}</p>
          <p><strong>Nights:</strong> {formData.nights}</p>
          <p><strong>Check-out:</strong> {formData.startDate && new Date(formData.startDate.getTime() + formData.nights * 24 * 60 * 60 * 1000).toLocaleDateString()}</p>
          {formData.siteNumber && <p><strong>Site Number:</strong> {formData.siteNumber}</p>}
          <p><strong>Guests:</strong> {formData.adultCount} Adults, {formData.childCount} Children</p>
          {Object.values(selectedExtras).length > 0 && (
            <>
              <p className="font-semibold mt-2">Additional Services:</p>
              <ul className="list-disc pl-5">
                {Object.values(selectedExtras).map(service => (
                  <li key={service.id}>
                    {service.name} (x{service.quantity})
                  </li>
                ))}
              </ul>
            </>
          )}
          <p className="font-bold mt-2">Total Price: ${totalPrice.toFixed(2)}</p>
        </div>
      )}
    </div>
  );

  return (
    <CommonLayout 
      title={step === 8 ? 'Reservation Confirmed' : 'Make a Reservation'}
      icon={Calendar}
      width="max-w-7xl"
      sidebar={renderSidebar()}
    >
      {renderStepContent()}
      {step < 7 && (
        <div className="flex justify-between mt-6">
          {step > 1 && (
            <Button 
              onClick={handlePrevious} 
              variant="outline"
              className="border-blue-600 text-blue-600 hover:bg-blue-50"
            >
              <ArrowLeft className="mr-2 h-4 w-4" /> Previous
            </Button>
          )}
          <Button 
            onClick={handleNext}
            className="bg-blue-600 hover:bg-blue-700 text-white ml-auto"
          >
            Next <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </div>
      )}
    </CommonLayout>
  );
};

export default MakeReservation;

================
File: src/components/ManageReservation.js
================
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import DatePicker from 'react-datepicker';
import "react-datepicker/dist/react-datepicker.css";
import { Settings, Edit, X, AlertTriangle, Lock, Loader, Search, Info } from 'lucide-react';
import CommonLayout from './CommonLayout';
import useForm from '../hooks/useForm';
import { useCampgroundContext } from '../context/CampgroundContext';
import { mockApi } from '../services/mockApi';

const ManageReservation = () => {
  const navigate = useNavigate();
  const { rules } = useCampgroundContext();
  const [step, setStep] = useState('search');
  const { formData, handleInputChange } = useForm({
    searchTerm: '',
    verificationCode: '',
  });
  const [matchingReservations, setMatchingReservations] = useState([]);
  const [selectedReservation, setSelectedReservation] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedDates, setEditedDates] = useState({ 
    startDate: new Date(), 
    endDate: new Date(new Date().getTime() + 4 * 24 * 60 * 60 * 1000) 
  });
  const [hasSearched, setHasSearched] = useState(false);
  const [isVerified, setIsVerified] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [availableSites, setAvailableSites] = useState({});

  useEffect(() => {
    const fetchAvailableSites = async () => {
      const today = new Date();
      const thirtyDaysLater = new Date(today.getTime() + 30 * 24 * 60 * 60 * 1000);
      const sites = await mockApi.getAvailableSites(today, thirtyDaysLater);
      setAvailableSites(sites);
    };
    fetchAvailableSites();
  }, []);

  const handleReservationLookup = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setHasSearched(false);
    
    try {
      const matches = await mockApi.searchReservations(formData.searchTerm);
      setMatchingReservations(matches);

      if (matches.length === 1) {
        const reservationId = String(matches[0].id).trim();
        const searchTerm = formData.searchTerm.trim();
        
        if (reservationId === searchTerm) {
          setSelectedReservation(matches[0]);
          setIsVerified(true);
          setStep('view');
        } else {
          setStep('select');
        }
      } else if (matches.length > 1) {
        setStep('select');
      } else {
        setStep('search');
      }
      
      setHasSearched(true);
    } catch (error) {
      console.error('Error searching for reservations:', error);
      setMatchingReservations([]);
      setStep('search');
      setHasSearched(true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReservationSelect = (reservation) => {
    setSelectedReservation(reservation);
    const startDate = new Date(reservation.checkInDate);
    const endDate = new Date(startDate.getTime() + 4 * 24 * 60 * 60 * 1000); // Assuming a 4-night stay as default
    setEditedDates({ startDate, endDate });
    setStep('verify');
  };

  const handleVerify = () => {
    if (formData.verificationCode.trim() !== '') {
      setIsVerified(true);
      setStep('view');
    } else {
      alert('Please enter a valid verification code.');
    }
  };

  const handleModify = () => {
    setIsEditing(true);
  };

  const handleSaveChanges = () => {
    setSelectedReservation(prev => ({
      ...prev,
      checkInDate: editedDates.startDate.toISOString().split('T')[0],
      checkOutDate: editedDates.endDate.toISOString().split('T')[0]
    }));
    setIsEditing(false);
    alert('Reservation updated successfully!');
  };

  const handleCancel = () => {
    setStep('confirm-cancel');
  };

  const confirmCancel = () => {
    console.log('Cancelling reservation:', selectedReservation.id);
    alert('Reservation cancelled successfully!');
    navigate('/');
  };

  const renderSearchStep = () => (
    <form onSubmit={handleReservationLookup} className="space-y-4">
      <div className="bg-blue-50 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <Info className="h-6 w-6 text-blue-500 mr-2" />
          </div>
          <div>
            <p className="font-bold">Verification Process</p>
            <p className="text-sm">
              If you provide your reservation number, you can proceed directly to manage your reservation. 
              Otherwise, for security purposes, you'll be asked to enter a verification code 
              sent to your registered email or phone number.
            </p>
          </div>
        </div>
      </div>
      <div>
        <label htmlFor="searchTerm" className="block text-sm font-medium text-gray-700 mb-1">
          Reservation Number, Last Name, Phone Number, or Email
        </label>
        <Input
          type="text"
          id="searchTerm"
          name="searchTerm"
          value={formData.searchTerm}
          onChange={handleInputChange}
          className="w-full"
          placeholder="Enter your reservation details"
          required
        />
      </div>
      <Button type="submit" className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        {isLoading ? <Loader className="animate-spin mr-2" /> : <Search className="mr-2 h-4 w-4" />}
        {isLoading ? 'Searching...' : 'Search Reservation'}
      </Button>
      {isLoading ? (
        <div className="mt-4 text-center text-gray-600">
          Searching for reservations...
        </div>
      ) : hasSearched && matchingReservations.length === 0 && (
        <div className="mt-4 p-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700">
          <div className="flex">
            <AlertTriangle className="h-6 w-6 text-yellow-500 mr-2" />
            <div>
              <p className="font-bold">No reservation found</p>
              <p>We couldn't find a reservation matching your search. Please check your details and try again.</p>
            </div>
          </div>
        </div>
      )}
    </form>
  );

  const renderSelectStep = () => (
    <div className="space-y-4">
      <h3 className="font-semibold text-lg">Select Your Reservation</h3>
      {matchingReservations.map(reservation => (
        <Button
          key={reservation.id}
          onClick={() => handleReservationSelect(reservation)}
          className="w-full justify-start text-left bg-white text-blue-600 border border-blue-600 hover:bg-blue-50"
        >
          <div>
            <p className="font-semibold">{reservation.name}</p>
            <p className="text-sm">Site: {reservation.siteNumber}, Check-in: {reservation.checkInDate}</p>
          </div>
        </Button>
      ))}
      <Button 
        onClick={() => {
          setStep('search');
          setHasSearched(false);
        }} 
        variant="outline" 
        className="w-full mt-4"
      >
        Back to Search
      </Button>
    </div>
  );

  const renderVerifyStep = () => (
    <div className="space-y-4">
      <div className="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <Lock className="h-6 w-6 text-blue-500 mr-4" />
          </div>
          <div>
            <p className="font-bold">Verify Your Identity</p>
            <p className="text-sm">To protect your reservation, please enter the verification code sent to your email or phone.</p>
          </div>
        </div>
      </div>
      <Input
        type="text"
        name="verificationCode"
        value={formData.verificationCode}
        onChange={handleInputChange}
        placeholder="Enter verification code"
        className="w-full"
        required
      />
      <Button onClick={handleVerify} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
        Verify
      </Button>
    </div>
  );

  const renderViewStep = () => (
    <div className="space-y-4">
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="font-semibold mb-2">Reservation Details:</h3>
        <p><strong>Code:</strong> {selectedReservation.id}</p>
        <p><strong>Name:</strong> {selectedReservation.name}</p>
        <p><strong>Email:</strong> {selectedReservation.email}</p>
        <p><strong>Phone:</strong> {selectedReservation.phone}</p>
        <p><strong>Site:</strong> {selectedReservation.siteNumber}</p>
        <p><strong>Check-in:</strong> {selectedReservation.checkInDate}</p>
        <p><strong>Check-out:</strong> {editedDates.endDate ? editedDates.endDate.toISOString().split('T')[0] : 'Not set'}</p>
      </div>
      {isEditing ? (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Check-in Date</label>
            <DatePicker
              selected={editedDates.startDate}
              onChange={(date) => setEditedDates(prev => ({ ...prev, startDate: date }))}
              selectsStart
              startDate={editedDates.startDate}
              endDate={editedDates.endDate}
              minDate={new Date()}
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Check-out Date</label>
            <DatePicker
              selected={editedDates.endDate}
              onChange={(date) => setEditedDates(prev => ({ ...prev, endDate: date }))}
              selectsEnd
              startDate={editedDates.startDate}
              endDate={editedDates.endDate}
              minDate={editedDates.startDate}
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
          <Button onClick={handleSaveChanges} className="w-full bg-green-600 hover:bg-green-700 text-white">
            Save Changes
          </Button>
        </div>
      ) : (
        <div className="space-y-2">
          <Button onClick={handleModify} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
            <Edit className="mr-2 h-4 w-4" /> Modify Reservation
          </Button>
          <Button onClick={handleCancel} variant="destructive" className="w-full bg-red-600 hover:bg-red-700 text-white">
            <X className="mr-2 h-4 w-4" /> Cancel Reservation
          </Button>
        </div>
      )}
    </div>
  );

  const renderConfirmCancelStep = () => (
    <div className="space-y-4">
      <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert">
        <div className="flex">
          <div className="py-1">
            <AlertTriangle className="h-6 w-6 text-yellow-500 mr-4" />
          </div>
          <div>
            <p className="font-bold">Cancel Reservation</p>
            <p className="text-sm">Are you sure you want to cancel your reservation? This action cannot be undone.</p>
          </div>
        </div>
      </div>
      <p><strong>Cancellation Policy:</strong></p>
      <ul className="list-disc pl-5 space-y-1">
        {rules.map((rule, index) => (
          <li key={index}>{rule}</li>
        ))}
      </ul>
      <Button onClick={confirmCancel} className="w-full bg-red-600 hover:bg-red-700 text-white">
        Confirm Cancellation
      </Button>
      <Button onClick={() => setStep('view')} variant="outline" className="w-full">
        Go Back
      </Button>
    </div>
  );

  const renderContent = () => {
    switch (step) {
      case 'search':
        return renderSearchStep();
      case 'select':
        return renderSelectStep();
      case 'verify':
        return renderVerifyStep();
      case 'view':
        return isVerified ? renderViewStep() : renderVerifyStep();
      case 'confirm-cancel':
        return renderConfirmCancelStep();
      default:
        return null;
    }
  };

  const renderSidebar = () => (
    <div className="space-y-4">
      <h3 className="text-xl font-semibold">Manage Reservation</h3>
      <ul className="space-y-2">
        <li className={`flex items-center space-x-2 ${step === 'search' || step === 'select' ? 'text-blue-600 font-semibold' : ''}`}>
          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${step === 'search' || step === 'select' ? 'border-blue-600' : 'border-gray-300'}`}>
            1
          </div>
          <span>Find your reservation</span>
        </li>
        <li className={`flex items-center space-x-2 ${step === 'verify' ? 'text-blue-600 font-semibold' : ''}`}>
          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${step === 'verify' ? 'border-blue-600' : 'border-gray-300'}`}>
            2
          </div>
          <span>Verify your identity</span>
        </li>
        <li className={`flex items-center space-x-2 ${step === 'view' ? 'text-blue-600 font-semibold' : ''}`}>
          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${step === 'view' ? 'border-blue-600' : 'border-gray-300'}`}>
            3
          </div>
          <span>View or modify details</span>
        </li>
        <li className={`flex items-center space-x-2 ${step === 'confirm-cancel' ? 'text-blue-600 font-semibold' : ''}`}>
          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${step === 'confirm-cancel' ? 'border-blue-600' : 'border-gray-300'}`}>
            4
          </div>
          <span>Confirm changes or cancellation</span>
        </li>
      </ul>
      {selectedReservation && isVerified && (
        <div className="mt-6 pt-6 border-t border-gray-200">
          <h4 className="font-semibold mb-2">Current Reservation:</h4>
          <p><strong>Guest:</strong> {selectedReservation.name}</p>
          <p><strong>Site:</strong> {selectedReservation.siteNumber}</p>
          <p><strong>Check-in:</strong> {selectedReservation.checkInDate}</p>
          <p><strong>Check-out:</strong> {editedDates.endDate ? editedDates.endDate.toISOString().split('T')[0] : 'Not set'}</p>
        </div>
      )}
    </div>
  );
  
  return (
    <CommonLayout 
      title="Manage My Reservation"
      icon={Settings}
      width="max-w-7xl"
      sidebar={renderSidebar()}
    >
      <Card>
        <CardContent className="pt-6">
          {renderContent()}
        </CardContent>
      </Card>
    </CommonLayout>
  );
};

export default ManageReservation;

================
File: src/components/Modal.js
================
import React from 'react';
import { X } from 'lucide-react';

const Modal = ({ isOpen, onClose, children }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Site Details</h3>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>
        {children}
      </div>
    </div>
  );
};

export default Modal;

================
File: src/components/PayForStay.js
================
import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { CreditCard, Plus, Minus, Calendar, Check, ShoppingCart } from 'lucide-react';
import * as LucideIcons from 'lucide-react';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import CommonLayout from './CommonLayout';
import CheckoutForm from './CheckoutForm';
import ExtrasSelector from './ExtrasSelector';
import { useCampgroundContext } from '../context/CampgroundContext';

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);

const PayForStay = () => {
  const navigate = useNavigate();
  const { additionalServices, siteTypes } = useCampgroundContext();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    daysStayed: 1,
    startDate: new Date().toISOString().split('T')[0],
    siteType: '',
    guestsOver13: 1,
  });
  const [selectedExtras, setSelectedExtras] = useState({});
  const [totalPrice, setTotalPrice] = useState(0);
  const [isFormValid, setIsFormValid] = useState(false);

  useEffect(() => {
    setIsFormValid(formData.daysStayed > 0 && formData.guestsOver13 > 0 && formData.siteType !== '');
  }, [formData]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleIncrement = (field) => {
    setFormData(prev => ({ ...prev, [field]: prev[field] + 1 }));
  };

  const handleDecrement = (field) => {
    setFormData(prev => ({ ...prev, [field]: Math.max(1, prev[field] - 1) }));
  };

  const handleExtrasChange = (updatedExtras) => {
    setSelectedExtras(updatedExtras);
  };

  const handleSiteTypeSelect = (typeId) => {
    setFormData(prev => ({ ...prev, siteType: typeId }));
  };

  const calculateTotal = useCallback(() => {
    if (!formData.siteType || !siteTypes) return 0;

    const selectedSiteType = siteTypes.find(type => type.id === formData.siteType);
    if (!selectedSiteType || !selectedSiteType.pricing) return 0;

    const { pricing } = selectedSiteType;
    const basePrice = pricing.basePrice * formData.daysStayed;
    const extraAdults = Math.max(0, formData.guestsOver13 - pricing.baseGuests);
    const extraGuestPrice = extraAdults * pricing.extraGuestPrice * formData.daysStayed;
    const extrasPrice = Object.values(selectedExtras).reduce((total, item) => 
      total + (item.price * item.quantity), 0);

    return basePrice + extraGuestPrice + extrasPrice;
  }, [formData, selectedExtras, siteTypes]);

  useEffect(() => {
    const total = calculateTotal();
    setTotalPrice(total);
  }, [calculateTotal]);

  const handleNextStep = () => {
    setStep(2);
  };

  const handlePaymentSuccess = (paymentIntent) => {
    console.log('Payment successful:', paymentIntent);
    alert('Payment processed successfully! Thank you for your stay.');
    navigate('/');
  };

  const handlePaymentError = (errorMessage) => {
    console.error('Payment error:', errorMessage);
    alert(`Payment failed: ${errorMessage}. Please try again or contact support.`);
  };

  const renderStayDetails = () => (
    <div className="space-y-6">
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="text-lg font-semibold mb-4">Stay Details</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-1">
              Start Date
            </label>
            <div className="flex items-center">
              <Calendar className="mr-2 h-5 w-5 text-gray-400" />
              <Input
                type="date"
                id="startDate"
                name="startDate"
                value={formData.startDate}
                onChange={handleInputChange}
                className="flex-grow"
                required
              />
            </div>
          </div>
          <div>
            <label htmlFor="daysStayed" className="block text-sm font-medium text-gray-700 mb-1">
              Number of Nights
            </label>
            <div className="flex items-center">
              <Button 
                type="button" 
                onClick={() => handleDecrement('daysStayed')} 
                className="px-3 py-2"
              >
                <Minus size={16} />
              </Button>
              <Input
                type="number"
                id="daysStayed"
                name="daysStayed"
                value={formData.daysStayed}
                onChange={handleInputChange}
                className="mx-2 w-20 text-center"
                readOnly
              />
              <Button 
                type="button" 
                onClick={() => handleIncrement('daysStayed')}
                className="px-3 py-2"
              >
                <Plus size={16} />
              </Button>
            </div>
          </div>
          <div>
            <label htmlFor="guestsOver13" className="block text-sm font-medium text-gray-700 mb-1">
              Number of Guests (over 13)
            </label>
            <div className="flex items-center">
              <Button 
                type="button" 
                onClick={() => handleDecrement('guestsOver13')} 
                className="px-3 py-2"
              >
                <Minus size={16} />
              </Button>
              <Input
                type="number"
                id="guestsOver13"
                name="guestsOver13"
                value={formData.guestsOver13}
                onChange={handleInputChange}
                className="mx-2 w-20 text-center"
                readOnly
              />
              <Button 
                type="button" 
                onClick={() => handleIncrement('guestsOver13')}
                className="px-3 py-2"
              >
                <Plus size={16} />
              </Button>
            </div>
          </div>
        </div>
      </div>
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="text-lg font-semibold mb-4">Site Type</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {siteTypes.map(type => {
            const IconComponent = LucideIcons[type.icon];
            return (
              <Button
                key={type.id}
                type="button"
                onClick={() => handleSiteTypeSelect(type.id)}
                className={`h-auto p-4 flex flex-col items-center justify-center text-lg transition-all duration-200 ease-in-out
                  ${formData.siteType === type.id
                    ? 'bg-blue-600 text-white'
                    : 'bg-white text-blue-600 border-2 border-blue-600 hover:bg-blue-100 hover:border-blue-700 hover:text-blue-700'
                  }
                  transform hover:shadow-lg
                `}
              >
                {IconComponent && <IconComponent size={32} className="mb-2" />}
                <span className="text-xl font-bold mb-2">{type.name}</span>
                <div className="text-sm">
                  <p>${type.pricing.basePrice}/night</p>
                  <p>({type.pricing.baseGuests} guests included)</p>
                </div>
              </Button>
            );
          })}
        </div>
      </div>
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <ShoppingCart className="mr-2 h-5 w-5" />
          Additional Services
        </h3>
        <ExtrasSelector
          selectedExtras={selectedExtras}
          onExtrasChange={handleExtrasChange}
          availableExtras={additionalServices}
        />
      </div>
      <Button 
        onClick={handleNextStep} 
        className="w-full bg-blue-600 hover:bg-blue-700 text-white"
        disabled={!isFormValid}
      >
        Proceed to Payment
      </Button>
    </div>
  );

  const renderPayment = () => (
    <div className="space-y-4">
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="font-semibold mb-2">Stay Summary:</h3>
        <p>Start Date: {formData.startDate}</p>
        <p>Nights Stayed: {formData.daysStayed}</p>
        <p>Site Type: {siteTypes.find(site => site.id === formData.siteType)?.name}</p>
        <p>Guests (over 13): {formData.guestsOver13}</p>
        {Object.values(selectedExtras).length > 0 && (
          <div>
            <p className="font-semibold mt-2">Extras:</p>
            <ul className="list-disc pl-5">
              {Object.values(selectedExtras).map(extra => (
                <li key={extra.id}>{extra.name} x{extra.quantity} - ${(extra.price * extra.quantity).toFixed(2)}</li>
              ))}
            </ul>
          </div>
        )}
        <p className="font-bold mt-2">Total Due: ${totalPrice.toFixed(2)}</p>
      </div>
      <Elements stripe={stripePromise}>
        <CheckoutForm 
          totalAmount={totalPrice}
          onPaymentSuccess={handlePaymentSuccess}
          onPaymentError={handlePaymentError}
        />
      </Elements>
    </div>
  );

  const renderContent = () => {
    switch(step) {
      case 1:
        return renderStayDetails();
      case 2:
        return renderPayment();
      default:
        return null;
    }
  };

  const renderSidebar = () => (
    <div className="space-y-4">
      <h3 className="text-xl font-semibold">Payment Process</h3>
      <ul className="space-y-2">
        <li className={`flex items-center space-x-2 ${step === 1 ? 'text-blue-600 font-semibold' : ''}`}>
          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${step === 1 ? 'border-blue-600' : 'border-gray-300'}`}>
            {step > 1 ? <Check size={16} /> : 1}
          </div>
          <span>Enter stay details</span>
        </li>
        <li className={`flex items-center space-x-2 ${step === 2 ? 'text-blue-600 font-semibold' : ''}`}>
          <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${step === 2 ? 'border-blue-600' : 'border-gray-300'}`}>
            2
          </div>
          <span>Review and pay</span>
        </li>
      </ul>
      <div className="mt-6 pt-6 border-t border-gray-200">
        <h4 className="font-semibold mb-2">Stay Summary:</h4>
        <p>Start Date: {formData.startDate}</p>
        <p>Nights Stayed: {formData.daysStayed}</p>
        <p>Site Type: {siteTypes.find(site => site.id === formData.siteType)?.name || 'Not selected'}</p>
        <p>Guests (over 13): {formData.guestsOver13}</p>
        {Object.values(selectedExtras).length > 0 && (
          <>
            <p className="font-semibold mt-2">Extras:</p>
            <ul className="list-disc pl-5">
              {Object.values(selectedExtras).map(extra => (
                <li key={extra.id}>{extra.name} x{extra.quantity}</li>
              ))}
            </ul>
          </>
        )}
        <p className="font-bold mt-2">Total: ${totalPrice.toFixed(2)}</p>
      </div>
    </div>
  );

  return (
    <CommonLayout 
      title="Pay for Past Stay"
      icon={CreditCard}
      width="max-w-7xl"
      sidebar={renderSidebar()}
    >
      <Card>
        <CardContent className="pt-6">
          {renderContent()}
        </CardContent>
      </Card>
    </CommonLayout>
  );
};

export default PayForStay;

================
File: src/components/PurchaseExtras.js
================
import React, { useState, useEffect } from 'react';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { ShoppingCart, Check } from 'lucide-react';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import CommonLayout from './CommonLayout';
import CheckoutForm from './CheckoutForm';
import ExtrasSelector from './ExtrasSelector';
import { useCampgroundContext } from '../context/CampgroundContext';

const stripePromise = loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY);

const PurchaseExtras = () => {
  const { additionalServices } = useCampgroundContext();
  const [step, setStep] = useState('selection');
  const [selectedExtras, setSelectedExtras] = useState({});
  const [totalPrice, setTotalPrice] = useState(0);

  useEffect(() => {
    const total = Object.values(selectedExtras).reduce((sum, item) => sum + (item.price * item.quantity), 0);
    setTotalPrice(total);
  }, [selectedExtras]);

  useEffect(() => {
    console.log('Additional Services:', additionalServices);
  }, [additionalServices]);

  const handleExtrasChange = (updatedExtras) => {
    setSelectedExtras(updatedExtras);
  };

  const handlePurchase = () => {
    setStep('payment');
  };

  const handlePaymentSuccess = (paymentIntent) => {
    console.log('Payment succeeded:', paymentIntent);
    alert('Purchase completed successfully! Please collect your items at the campground office.');
    setSelectedExtras({});
    setTotalPrice(0);
    setStep('selection');
  };

  const handlePaymentError = (errorMessage) => {
    console.error('Payment failed:', errorMessage);
    alert(`Payment failed: ${errorMessage}. Please try again or contact support.`);
  };

  const renderSelectionStep = () => (
    <div className="space-y-4">
      <ExtrasSelector
        selectedExtras={selectedExtras}
        onExtrasChange={handleExtrasChange}
        availableExtras={additionalServices}
      />
      {Object.values(selectedExtras).length > 0 && (
        <Button onClick={handlePurchase} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
          Proceed to Payment
        </Button>
      )}
    </div>
  );

  const renderPaymentStep = () => (
    <div className="space-y-4">
      <div className="bg-gray-100 p-4 rounded-md">
        <h3 className="font-semibold mb-2">Your Order:</h3>
        {Object.values(selectedExtras).map((item) => (
          <div key={item.id} className="flex justify-between items-center mb-2">
            <span>{item.name} x {item.quantity}</span>
            <span>${(item.price * item.quantity).toFixed(2)}</span>
          </div>
        ))}
        <div className="mt-4 font-bold">
          Total: ${totalPrice.toFixed(2)}
        </div>
      </div>
      <Elements stripe={stripePromise}>
        <CheckoutForm 
          totalAmount={totalPrice}
          onPaymentSuccess={handlePaymentSuccess}
          onPaymentError={handlePaymentError}
        />
      </Elements>
    </div>
  );

  const renderContent = () => {
    switch (step) {
      case 'selection':
        return renderSelectionStep();
      case 'payment':
        return renderPaymentStep();
      default:
        return null;
    }
  };

  const renderSidebar = () => {
    const steps = [
      { key: 'selection', label: 'Select additional services' },
      { key: 'payment', label: 'Complete payment' }
    ];
  
    const getStepIndex = (currentStep) => steps.findIndex(s => s.key === currentStep);
    const currentStepIndex = getStepIndex(step);
  
    return (
      <div className="space-y-4">
        <h3 className="text-xl font-semibold">Purchase Process</h3>
        <ul className="space-y-2">
          {steps.map((s, index) => (
            <li key={s.key} 
                className={`flex items-center space-x-2 ${step === s.key ? 'text-blue-600 font-semibold' : ''}`}>
              <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                currentStepIndex > index
                  ? 'bg-blue-100 border-blue-600 text-blue-600' 
                  : step === s.key 
                    ? 'border-blue-600' 
                    : 'border-gray-300'
              }`}>
                {currentStepIndex > index ? (
                  <Check size={16} />
                ) : (
                  index + 1
                )}
              </div>
              <span>{s.label}</span>
            </li>
          ))}
        </ul>
        {Object.values(selectedExtras).length > 0 && (
          <div className="mt-6 pt-6 border-t border-gray-200">
            <h4 className="font-semibold mb-2">Your Cart:</h4>
            {Object.values(selectedExtras).map((item) => (
              <p key={item.id}>{item.name} x {item.quantity}</p>
            ))}
            <p className="font-bold mt-2">Total: ${totalPrice.toFixed(2)}</p>
          </div>
        )}
      </div>
    );
  };

  return (
    <CommonLayout 
      title="Purchase Extras"
      icon={ShoppingCart}
      width="max-w-7xl"
      sidebar={renderSidebar()}
    >
      <Card>
        <CardContent className="pt-6">
          {renderContent()}
        </CardContent>
      </Card>
    </CommonLayout>
  );
};

export default PurchaseExtras;

================
File: src/components/ReservationCalendar.js
================
import React, { useState, useMemo, useEffect } from 'react';
import { format, addDays, eachDayOfInterval, isSameDay, isAfter, startOfDay, isBefore } from 'date-fns';
import { Card, CardContent } from './ui/card';
import { Button } from './ui/button';
import { ChevronLeft, ChevronRight, Check } from 'lucide-react';

const ReservationCalendar = ({ availableSites, onDateSelect, selectedDate, siteType }) => {
  const [startDate, setStartDate] = useState(startOfDay(new Date()));

  useEffect(() => {
    console.log('ReservationCalendar - availableSites:', availableSites);
    console.log('ReservationCalendar - selectedDate:', selectedDate);
    console.log('ReservationCalendar - siteType:', siteType);
  }, [availableSites, selectedDate, siteType]);

  const days = useMemo(() => {
    return eachDayOfInterval({ start: startDate, end: addDays(startDate, 6) });
  }, [startDate]);

  const handlePrevWeek = () => {
    console.log('ReservationCalendar - Moving to previous week');
    setStartDate(prevDate => addDays(prevDate, -7));
  };

  const handleNextWeek = () => {
    console.log('ReservationCalendar - Moving to next week');
    setStartDate(prevDate => addDays(prevDate, 7));
  };

  const handleDateClick = (day) => {
    const dateStr = format(day, 'yyyy-MM-dd');
    console.log('ReservationCalendar - Date clicked:', dateStr);
    console.log('ReservationCalendar - Availability for this date:', availableSites[dateStr]);
    if (availableSites[dateStr] && availableSites[dateStr][siteType] > 0) {
      onDateSelect(day);
    } else {
      console.log('ReservationCalendar - Date not available or no sites available for this date');
    }
  };

  return (
    <Card>
      <CardContent className="p-4">
        <div className="flex justify-between items-center mb-4">
          <Button onClick={handlePrevWeek} variant="outline" size="icon">
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <h2 className="text-lg font-semibold">
            {format(days[0], 'MMM d')} - {format(days[days.length - 1], 'MMM d, yyyy')}
          </h2>
          <Button onClick={handleNextWeek} variant="outline" size="icon">
            <ChevronRight className="h-4 w-4" />
          </Button>
        </div>
        <div className="grid grid-cols-7 gap-2">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
            <div key={day} className="text-center font-medium text-gray-500">
              {day}
            </div>
          ))}
          {days.map((day) => {
            const dateStr = format(day, 'yyyy-MM-dd');
            const isAvailable = availableSites[dateStr] && availableSites[dateStr][siteType] > 0;
            const isSelected = selectedDate && isSameDay(day, selectedDate);
            const isPast = isBefore(day, startOfDay(new Date()));

            return (
              <div key={day.toISOString()} className="text-center">
                <div className="text-sm">{format(day, 'd')}</div>
                <div className="mt-1">
                  <Button 
                    onClick={() => handleDateClick(day)} 
                    variant="outline" 
                    size="sm"
                    className={`w-full h-12 flex flex-col items-center justify-center ${
                      isSelected 
                        ? 'bg-blue-500 text-white' 
                        : isAvailable 
                          ? 'bg-green-100 hover:bg-green-200 text-green-800' 
                          : 'bg-red-100 text-red-800 cursor-not-allowed'
                    } ${isPast ? 'opacity-50' : ''}`}
                    disabled={!isAvailable || isPast}
                  >
                    {isSelected ? (
                      <Check className="w-4 h-4" />
                    ) : isAvailable ? (
                      <span className="text-xs">{availableSites[dateStr][siteType]} sites</span>
                    ) : (
                      <span className="text-xs">Full</span>
                    )}
                  </Button>
                </div>
              </div>
            );
          })}
        </div>
      </CardContent>
    </Card>
  );
};

export default ReservationCalendar;

================
File: src/components/SiteAvailability.js
================
import React, { useState } from 'react';
import { Card, CardContent } from './ui/card';
import Modal from './Modal';
import { Users } from 'lucide-react';
import config from '../config/appConfig';
const { siteTypes } = config.campground;

const SiteAvailability = () => {
  const [selectedSite, setSelectedSite] = useState(null);

  // Mock data for occupied powered sites
  const occupiedPoweredSites = [
    { id: 'P1', number: 'A1', occupants: { count: 2, names: ['John Doe', 'Jane Doe'], checkIn: '2023-09-01', checkOut: '2023-09-05' } },
    { id: 'P3', number: 'B1', occupants: { count: 3, names: ['Alice Smith', 'Bob Smith', 'Charlie Smith'], checkIn: '2023-09-02', checkOut: '2023-09-07' } },
    { id: 'P4', number: 'B2', occupants: { count: 1, names: ['David Johnson'], checkIn: '2023-09-03', checkOut: '2023-09-06' } },
    { id: 'P7', number: 'D1', occupants: { count: 4, names: ['Eve Brown', 'Frank Brown', 'Grace Brown', 'Henry Brown'], checkIn: '2023-09-04', checkOut: '2023-09-08' } },
  ];

  // Mock data for occupied unpowered sites
  const occupiedUnpoweredSites = [
    { id: 'U1', number: 'U1', occupants: { count: 2, names: ['Ian White', 'Julia White'], checkIn: '2023-09-01', checkOut: '2023-09-03' } },
    { id: 'U2', number: 'U2', occupants: { count: 3, names: ['Kevin Black', 'Laura Black', 'Mike Black'], checkIn: '2023-09-02', checkOut: '2023-09-04' } },
    { id: 'U3', number: 'U3', occupants: { count: 1, names: ['Nancy Green'], checkIn: '2023-09-03', checkOut: '2023-09-05' } },
    { id: 'U4', number: 'U4', occupants: { count: 2, names: ['Oscar Blue', 'Patricia Blue'], checkIn: '2023-09-04', checkOut: '2023-09-06' } },
    { id: 'U5', number: 'U5', occupants: { count: 4, names: ['Quinn Red', 'Rachel Red', 'Sam Red', 'Tom Red'], checkIn: '2023-09-05', checkOut: '2023-09-07' } },
  ];

  const poweredSites = siteTypes.find(type => type.id === 'powered').sites;
  const unpoweredSitesCount = siteTypes.find(type => type.id === 'unpowered').totalSites;

  const handleSiteClick = (site) => {
    setSelectedSite(site);
  };

  return (
    <div className="container mx-auto mt-10 px-4 pb-10">
      <Card className="w-full max-w-4xl mx-auto">
        <CardContent className="p-6">
          <h2 className="text-2xl font-bold mb-6 text-center">Site Availability</h2>
          
          <div className="mb-8">
            <h3 className="text-xl font-semibold mb-4">Powered Sites</h3>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              {poweredSites.map((site) => {
                const occupiedSite = occupiedPoweredSites.find(s => s.id === site.id);
                const isOccupied = !!occupiedSite;
                return (
                  <div 
                    key={site.id} 
                    className={`flex flex-col items-center justify-center p-3 border rounded cursor-pointer hover:bg-gray-100 ${
                      isOccupied ? 'bg-red-100' : 'bg-green-100'
                    }`}
                    onClick={() => isOccupied && handleSiteClick(occupiedSite)}
                  >
                    <span className="font-bold">{site.number}</span>
                    {isOccupied && (
                      <div className="flex items-center mt-1">
                        <Users size={16} className="mr-1" />
                        <span>{occupiedSite.occupants.count}</span>
                      </div>
                    )}
                    <span className={`mt-1 px-2 py-1 rounded text-xs ${isOccupied ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}`}>
                      {isOccupied ? 'Occupied' : 'Available'}
                    </span>
                  </div>
                );
              })}
            </div>
          </div>
          
          <div className="mb-8">
            <h3 className="text-xl font-semibold mb-4">Unpowered Sites</h3>
            <div className="bg-blue-100 p-4 rounded mb-4">
              <p className="text-center">
                <span className="font-bold">{unpoweredSitesCount - occupiedUnpoweredSites.length}</span> out of <span className="font-bold">{unpoweredSitesCount}</span> unpowered sites available
              </p>
            </div>
            <h4 className="text-lg font-semibold mb-2">Occupied Unpowered Sites</h4>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
              {occupiedUnpoweredSites.map((site) => (
                <div 
                  key={site.id} 
                  className="flex flex-col items-center justify-center p-3 border rounded cursor-pointer hover:bg-gray-100 bg-red-100"
                  onClick={() => handleSiteClick(site)}
                >
                  <span className="font-bold">{site.number}</span>
                  <div className="flex items-center mt-1">
                    <Users size={16} className="mr-1" />
                    <span>{site.occupants.count}</span>
                  </div>
                  <span className="mt-1 px-2 py-1 rounded text-xs bg-red-500 text-white">
                    Occupied
                  </span>
                </div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      <Modal isOpen={!!selectedSite} onClose={() => setSelectedSite(null)}>
        {selectedSite && (
          <div>
            <h4 className="text-lg font-semibold mb-2">Site {selectedSite.number}</h4>
            <p><strong>Number of Occupants:</strong> {selectedSite.occupants.count}</p>
            <p><strong>Occupants:</strong> {selectedSite.occupants.names.join(', ')}</p>
            <p><strong>Check-in:</strong> {selectedSite.occupants.checkIn}</p>
            <p><strong>Check-out:</strong> {selectedSite.occupants.checkOut}</p>
          </div>
        )}
      </Modal>
    </div>
  );
};

export default SiteAvailability;

================
File: src/lib/supabaseClient.js
================
// lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY

if (!supabaseUrl) throw new Error('Missing REACT_APP_SUPABASE_URL')
if (!supabaseAnonKey) throw new Error('Missing REACT_APP_SUPABASE_ANON_KEY')

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

================
File: src/lib/utils.js
================
import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}

================
File: src/hooks/useForm.js
================
import { useState } from 'react';

const useForm = (initialState) => {
  const [formData, setFormData] = useState(initialState);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleNumericInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: Math.max(0, parseInt(value) || 0)
    }));
  };

  const setField = (name, value) => {
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  return { formData, handleInputChange, handleNumericInputChange, setField };
};

export default useForm;

================
File: src/services/api.js
================
// src/services/api.js
import { supabase } from '../lib/supabaseClient'

export const getSiteTypes = async () => {
  const { data, error } = await supabase
    .from('site_types')
    .select('*')
  
  if (error) {
    console.error('Error fetching site types:', error)
    throw error
  }
  
  // Format the data to match the expected structure
  return data.map(site => ({
    ...site,
    pricing: {
      basePrice: site.base_price,
      extraGuestPrice: site.extra_guest_price,
      baseGuests: site.base_guests,
      maxGuests: site.max_guests
    }
  }))
}

export const getAvailableSites = async (startDate, endDate, siteType) => {
  console.log('Fetching available sites for:', { startDate, endDate, siteType });

  // First, get all sites of the specified type
  const { data: allSites, error: sitesError } = await supabase
    .from('sites')
    .select('*, site_types!inner(*)')
    .eq('site_types.id', siteType);

  if (sitesError) {
    console.error('Error fetching sites:', sitesError);
    throw sitesError;
  }

  // Then, get all reservations that overlap with the specified date range
  const { data: reservations, error: reservationsError } = await supabase
    .from('reservations')
    .select('site_id')
    .gte('end_date', startDate)
    .lte('start_date', endDate);

  if (reservationsError) {
    console.error('Error fetching reservations:', reservationsError);
    throw reservationsError;
  }

  console.log('All sites:', allSites);
  console.log('Reservations:', reservations);

  // Filter out the reserved sites
  const reservedSiteIds = new Set(reservations.map(r => r.site_id));
  const availableSites = allSites.filter(site => !reservedSiteIds.has(site.id));

  console.log('Available sites:', availableSites);

  return availableSites;
}

export const getAdditionalServices = async () => {
  const { data, error } = await supabase
    .from('additional_services')
    .select('*')
  
  if (error) {
    console.error('Error fetching additional services:', error)
    throw error
  }

  return data
}

export const getRules = async () => {
  const { data, error } = await supabase
    .from('rules')
    .select('*')
  
  if (error) {
    console.error('Error fetching rules:', error)
    throw error
  }

  return data.map(rule => rule.description)
}

export const createReservation = async (reservationData) => {
  console.log('Creating reservation with data:', reservationData);
  try {
    const { data, error } = await supabase
      .from('reservations')
      .insert([
        {
          site_id: reservationData.siteId, // This can be null now
          site_type: reservationData.siteType, // Add this line
          start_date: reservationData.startDate,
          end_date: reservationData.endDate,
          guest_name: `${reservationData.firstName} ${reservationData.lastName}`,
          guest_email: reservationData.email,
          guest_phone: reservationData.phoneNumber,
          adult_count: reservationData.adultCount,
          child_count: reservationData.childCount,
          total_price: reservationData.totalPrice
        }
      ])
      .single();

    if (error) throw error;

    // If there are extras, insert them as well
    if (reservationData.extras && reservationData.extras.length > 0) {
      const { error: extrasError } = await supabase
        .from('reservation_extras')
        .insert(reservationData.extras.map(extra => ({
          reservation_id: data.id,
          extra_id: extra.id,
          quantity: extra.quantity
        })));

      if (extrasError) throw extrasError;
    }

    console.log('Reservation created successfully:', data);
    return { success: true, reservation: data };
  } catch (error) {
    console.error('Error creating reservation:', error.message);
    return { success: false, error: error.message };
  }
}

export const searchReservations = async (searchTerm) => {
  const { data, error } = await supabase
    .from('reservations')
    .select('*')
    .or(`id.eq.${searchTerm},guest_name.ilike.%${searchTerm}%,guest_email.ilike.%${searchTerm}%,guest_phone.ilike.%${searchTerm}%`)

  if (error) {
    console.error('Error searching reservations:', error)
    throw error
  }

  return data
}

export const updateReservation = async (reservationId, updateData) => {
  const { data, error } = await supabase
    .from('reservations')
    .update(updateData)
    .eq('id', reservationId)
    .select()

  if (error) {
    console.error('Error updating reservation:', error)
    throw error
  }

  return data[0]
}

export const cancelReservation = async (reservationId) => {
  const { data, error } = await supabase
    .from('reservations')
    .delete()
    .eq('id', reservationId)

  if (error) {
    console.error('Error cancelling reservation:', error)
    throw error
  }

  return { success: true }
}

export const createPaymentIntent = async (amount, currency) => {
  const response = await fetch('/api/create-payment-intent', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ amount, currency }),
  })

  if (!response.ok) {
    const errorData = await response.json()
    throw new Error(errorData.error || 'Failed to create payment intent')
  }

  return response.json()
}

================
File: src/services/mockApi.js
================
import config from '../config/appConfig';

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const { campground } = config;

export const mockApi = {
  getReservations: async () => {
    await delay(300);
    return campground.exampleReservations;
  },

  searchReservations: async (searchTerm) => {
    await delay(300);
    return campground.exampleReservations.filter(res => 
      res.id.toString() === searchTerm ||  // Check for exact reservation number match
      res.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      res.email.toLowerCase() === searchTerm.toLowerCase() ||
      res.phone === searchTerm
    );
  },

  getAdditionalServices: async () => {
    await delay(300);
    return campground.additionalServices;
  },

  getSiteTypes: async () => {
    await delay(300);
    return campground.siteTypes;
  },

  getPricing: async () => {
    await delay(300);
    return campground.pricing;
  },

  getRules: async () => {
    await delay(300);
    return campground.rules;
  },

  getAvailableSites: async (startDate, endDate) => {
    await delay(300);
    
    // Generate mock data for the date range
    const availableSites = {};
    const currentDate = new Date(startDate);
    const endDateObj = new Date(endDate);
  
    while (currentDate <= endDateObj) {
      const dateString = currentDate.toISOString().split('T')[0];
      
      // Randomly decide if powered sites are available (80% chance of availability)
      const hasPoweredAvailability = Math.random() < 0.8;
      
      availableSites[dateString] = {
        powered: hasPoweredAvailability ? Math.floor(Math.random() * 5) + 1 : 0, // 0 to 5 available powered sites
        unpowered: Math.floor(Math.random() * 10) + 5 // 5 to 14 available unpowered sites
      };
      currentDate.setDate(currentDate.getDate() + 1);
    }
  
    console.log("Mock Available Sites:", availableSites);
    return availableSites;
  },

  makeReservation: async (reservationData) => {
    await delay(500);
    console.log('Reservation made:', reservationData);
    return { success: true, reservationId: Math.floor(Math.random() * 1000000) };
  },

  updateReservation: async (reservationId, updatedData) => {
    await delay(500);
    console.log('Reservation updated:', { id: reservationId, ...updatedData });
    return { success: true };
  },

  cancelReservation: async (reservationId) => {
    await delay(500);
    console.log('Reservation cancelled:', reservationId);
    return { success: true };
  },

  createPaymentIntent: async (amount, currency) => {
    await delay(300);
    try {
      const response = await fetch(`${config.api.baseUrl}${config.api.endpoints.createPaymentIntent}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ amount, currency }),
      });

      if (!response.ok) {
        throw new Error('Failed to create payment intent');
      }

      return await response.json();
    } catch (error) {
      console.error('Error creating payment intent:', error);
      throw error;
    }
  },
};

================
File: server/routes/paymentRoutes.js
================
// File: server/routes/paymentRoutes.js

const express = require('express');
const router = express.Router();
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

router.post('/create-payment-intent', async (req, res) => {
  try {
    const { amount, currency } = req.body;

    // Validate the input
    if (!amount || !currency) {
      return res.status(400).json({ error: 'Amount and currency are required' });
    }

    // Create a PaymentIntent with the order amount and currency
    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency,
    });

    // Send the client secret to the client
    res.json({ clientSecret: paymentIntent.client_secret });
  } catch (error) {
    console.error('Error creating PaymentIntent:', error);
    res.status(500).json({ error: 'An error occurred while creating the PaymentIntent' });
  }
});

module.exports = router;

================
File: src/context/CampgroundContext.js
================
import React, { createContext, useContext, useState, useEffect } from 'react';
import { getSiteTypes, getAdditionalServices, getRules } from '../services/api';
import config from '../config/appConfig';

const CampgroundContext = createContext();

export const useCampgroundContext = () => useContext(CampgroundContext);

export const CampgroundProvider = ({ children }) => {
  const [contextData, setContextData] = useState({
    siteTypes: [],
    additionalServices: [],
    rules: [],
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [fetchedSiteTypes, fetchedAdditionalServices, fetchedRules] = await Promise.all([
          getSiteTypes().catch(() => []),
          getAdditionalServices().catch(() => []),
          getRules().catch(() => [])
        ]);

        setContextData({
          siteTypes: fetchedSiteTypes.length > 0 ? fetchedSiteTypes : config.campground.siteTypes,
          additionalServices: fetchedAdditionalServices.length > 0 ? fetchedAdditionalServices : config.campground.additionalServices,
          rules: fetchedRules.length > 0 ? fetchedRules : config.campground.rules,
        });
      } catch (error) {
        console.error("Error fetching data:", error);
        // Fallback to config data if fetch fails
        setContextData({
          siteTypes: config.campground.siteTypes,
          additionalServices: config.campground.additionalServices,
          rules: config.campground.rules,
        });
      }
    };

    fetchData();
  }, []);

  const updateContext = (newData) => {
    setContextData(prevData => ({ ...prevData, ...newData }));
  };

  return (
    <CampgroundContext.Provider value={{ ...contextData, updateContext }}>
      {children}
    </CampgroundContext.Provider>
  );
};

================
File: src/components/reservations/Step1.js
================
import React, { useEffect } from 'react';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import * as LucideIcons from 'lucide-react';
import { Plus, Minus } from 'lucide-react';

const Step1 = ({ siteTypes, formData, handleSiteTypeSelect, handleGuestCountChange }) => {
  useEffect(() => {
    console.log('Step1 - siteTypes:', siteTypes);
    console.log('Step1 - formData:', formData);
  }, [siteTypes, formData]);

  if (!Array.isArray(siteTypes) || siteTypes.length === 0) {
    return <p>Loading site types... (siteTypes: {JSON.stringify(siteTypes)})</p>;
  }

  const handleIncrement = (field) => {
    handleGuestCountChange({ target: { name: field, value: formData[field] + 1 } });
  };

  const handleDecrement = (field) => {
    handleGuestCountChange({ target: { name: field, value: Math.max(0, formData[field] - 1) } });
  };

  return (
    <div className="space-y-6">
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 1: Choose Site Type</h3>
      
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {siteTypes.map(type => {
          if (!type || typeof type !== 'object') {
            console.log('Invalid site type:', type);
            return null;
          }

          const { id, name, icon, pricing } = type;

          if (!id || !name || !icon || !pricing) {
            console.log('Missing required properties in site type:', type);
            return null;
          }

          const IconComponent = LucideIcons[icon];
          const totalGuests = formData.adultCount + formData.childCount;
          const isDisabled = totalGuests > pricing.maxGuests;

          return (
            <Button
              key={id}
              type="button"
              onClick={() => handleSiteTypeSelect(id)}
              disabled={isDisabled}
              className={`h-auto p-4 flex flex-col items-center justify-center text-lg transition-all duration-200 ease-in-out
                ${formData.siteType === id
                  ? 'bg-blue-600 text-white'
                  : isDisabled
                    ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
                    : 'bg-white text-blue-600 border-2 border-blue-600 hover:bg-blue-100 hover:border-blue-700 hover:text-blue-700'
                }
                transform hover:shadow-lg
              `}
            >
              {IconComponent && <IconComponent size={32} className="mb-2" />}
              <span className="text-xl font-bold mb-2">{name}</span>
              <div className="text-sm">
                <p>${pricing.basePrice}/night (up to {pricing.baseGuests} guests)</p>
                <p>${pricing.extraGuestPrice}/night per additional guest</p>
                <p>Max guests: {pricing.maxGuests}</p>
              </div>
              {isDisabled && (
                <p className="text-red-500 text-xs mt-2">Exceeds maximum guests</p>
              )}
            </Button>
          );
        })}
      </div>

      <div className="mt-8 p-4 bg-gray-100 rounded-md">
        <h4 className="text-lg font-semibold mb-4">Number of Guests</h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label htmlFor="adultCount" className="block text-sm font-medium text-gray-700 mb-1">Number of Adults</label>
            <div className="flex items-center">
              <Button type="button" onClick={() => handleDecrement('adultCount')} disabled={formData.adultCount <= 1}>
                <Minus size={16} />
              </Button>
              <Input
                type="number"
                id="adultCount"
                name="adultCount"
                value={formData.adultCount}
                onChange={handleGuestCountChange}
                min="1"
                className="mx-2 w-20 text-center"
                readOnly
              />
              <Button type="button" onClick={() => handleIncrement('adultCount')}>
                <Plus size={16} />
              </Button>
            </div>
          </div>
          <div>
            <label htmlFor="childCount" className="block text-sm font-medium text-gray-700 mb-1">Number of Children</label>
            <div className="flex items-center">
              <Button type="button" onClick={() => handleDecrement('childCount')} disabled={formData.childCount <= 0}>
                <Minus size={16} />
              </Button>
              <Input
                type="number"
                id="childCount"
                name="childCount"
                value={formData.childCount}
                onChange={handleGuestCountChange}
                min="0"
                className="mx-2 w-20 text-center"
                readOnly
              />
              <Button type="button" onClick={() => handleIncrement('childCount')}>
                <Plus size={16} />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Step1;

================
File: src/components/reservations/Step2.js
================
import React, { useEffect, useMemo } from 'react';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Plus, Minus, Calendar, AlertTriangle } from 'lucide-react';
import ReservationCalendar from '../ReservationCalendar';
import { addDays, format } from 'date-fns';

const Step2 = ({ formData, availableSites, handleDateSelect, handleNightsChange }) => {
  useEffect(() => {
    console.log('Step2 - formData:', formData);
    console.log('Step2 - availableSites:', availableSites);
  }, [formData, availableSites]);

  const transformedAvailableSites = useMemo(() => {
    const result = {};
    const today = new Date();
    for (let i = 0; i < 30; i++) {
      const date = addDays(today, i);
      const dateString = format(date, 'yyyy-MM-dd');
      result[dateString] = { [formData.siteType]: availableSites.length };
    }
    console.log('Transformed availableSites:', result);
    return result;
  }, [availableSites, formData.siteType]);

  const handleCalendarDateSelect = (date) => {
    console.log('Step2 - Date selected:', date);
    handleDateSelect(date);
  };

  const incrementNights = () => {
    console.log('Step2 - Incrementing nights');
    handleNightsChange(formData.nights + 1);
  };

  const decrementNights = () => {
    console.log('Step2 - Decrementing nights');
    handleNightsChange(Math.max(1, formData.nights - 1));
  };

  return (
    <div className="space-y-6">
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 2: Select Dates</h3>
      
      {availableSites.length === 0 && (
        <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4">
          <div className="flex">
            <AlertTriangle className="h-6 w-6 text-yellow-500 mr-2" />
            <p>No available sites found for the selected dates. Please try a different date range or site type.</p>
          </div>
        </div>
      )}

      <ReservationCalendar 
        availableSites={transformedAvailableSites}
        onDateSelect={handleCalendarDateSelect}
        selectedDate={formData.startDate}
        siteType={formData.siteType}
      />

      {formData.startDate && (
        <div className="mt-4">
          <label htmlFor="nights" className="block text-sm font-medium text-gray-700 mb-1">
            Number of Nights
          </label>
          <div className="flex items-center">
            <Button 
              type="button" 
              onClick={decrementNights}
              className="px-3 py-2"
              disabled={formData.nights <= 1}
            >
              <Minus size={16} />
            </Button>
            <Input
              type="number"
              id="nights"
              name="nights"
              value={formData.nights}
              onChange={(e) => handleNightsChange(parseInt(e.target.value) || 1)}
              min="1"
              max={formData.maxNights}
              className="mx-2 w-20 text-center"
            />
            <Button 
              type="button" 
              onClick={incrementNights}
              className="px-3 py-2"
              disabled={formData.nights >= formData.maxNights}
            >
              <Plus size={16} />
            </Button>
          </div>
          <p className="text-sm text-gray-500 mt-1">Maximum stay: {formData.maxNights} nights</p>
        </div>
      )}

      {formData.startDate && (
        <div className="bg-gray-100 p-4 rounded-md mt-4">
          <div className="flex items-center mb-2">
            <Calendar className="mr-2 h-5 w-5 text-gray-500" />
            <h4 className="font-semibold">Reservation Summary</h4>
          </div>
          <p><strong>Check-in:</strong> {formData.startDate.toLocaleDateString()}</p>
          <p><strong>Check-out:</strong> {new Date(formData.startDate.getTime() + formData.nights * 24 * 60 * 60 * 1000).toLocaleDateString()}</p>
          <p><strong>Total nights:</strong> {formData.nights}</p>
          <p><strong>Site Type:</strong> {formData.siteType}</p>
          <p><strong>Available sites:</strong> {availableSites.length}</p>
        </div>
      )}
    </div>
  );
};

export default Step2;

================
File: src/components/reservations/Step3.js
================
import React from 'react';

const Step3 = ({ formData, handleInputChange, siteTypes }) => {
  const selectedSiteType = siteTypes.find(type => type.id === formData.siteType);
  const availableSites = selectedSiteType?.sites || [];

  return (
    <>
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 3: Select Site</h3>
      <div className="space-y-4">
        {availableSites.length > 0 ? (
          <div>
            <label htmlFor="siteNumber" className="block text-sm font-medium text-gray-700 mb-1">Available Sites</label>
            <select
              id="siteNumber"
              name="siteNumber"
              value={formData.siteNumber}
              onChange={handleInputChange}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
              required
            >
              <option value="">Select an available site</option>
              {availableSites.map(site => (
                <option key={site.id} value={site.number}>{site.number}</option>
              ))}
            </select>
          </div>
        ) : (
          <p className="text-red-500">No sites available for the selected type. Please go back and choose a different site type.</p>
        )}
      </div>
    </>
  );
};

export default Step3;

================
File: src/components/reservations/Step4.js
================
import React from 'react';
import { Input } from '../ui/input';

const Step4 = ({ formData, handleInputChange }) => {
  return (
    <>
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 4: Guest Information</h3>
      <div className="space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">First Name</label>
            <Input
              type="text"
              id="firstName"
              name="firstName"
              value={formData.firstName}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">Last Name</label>
            <Input
              type="text"
              id="lastName"
              name="lastName"
              value={formData.lastName}
              onChange={handleInputChange}
              required
            />
          </div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <Input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              required
            />
          </div>
          <div>
            <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
            <Input
              type="tel"
              id="phoneNumber"
              name="phoneNumber"
              value={formData.phoneNumber}
              onChange={handleInputChange}
              required
            />
          </div>
        </div>
      </div>
    </>
  );
};

export default Step4;

================
File: src/components/reservations/Step5.js
================
import React, { useEffect } from 'react';
import ExtrasSelector from '../ExtrasSelector';

const Step5 = ({ selectedExtras, setSelectedExtras, availableExtras }) => {
  useEffect(() => {
    console.log('Available Extras in Step5:', availableExtras);
  }, [availableExtras]);

  return (
    <div>
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 5: Additional Services</h3>
      {availableExtras && availableExtras.length > 0 ? (
        <ExtrasSelector
          selectedExtras={selectedExtras}
          onExtrasChange={setSelectedExtras}
          availableExtras={availableExtras}
        />
      ) : (
        <p>No additional services available.</p>
      )}
    </div>
  );
};

export default Step5;

================
File: src/components/reservations/Step6.js
================
// src/components/reservations/Step6.js
import React from 'react';

const Step6 = ({ formData, selectedExtras, totalPrice, siteTypes }) => {
  return (
    <>
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 6: Review and Confirm</h3>
      <div className="space-y-4">
        <div className="bg-gray-100 p-4 rounded-md">
          <h4 className="font-semibold mb-2">Reservation Details:</h4>
          <p>Check-in Date: {formData.startDate?.toLocaleDateString()}</p>
          <p>Number of Nights: {formData.nights}</p>
          <p>Check-out Date: {new Date(formData.startDate?.getTime() + formData.nights * 24 * 60 * 60 * 1000).toLocaleDateString()}</p>
          <p>Site Type: {siteTypes.find(type => type.id === formData.siteType)?.name}</p>
          {formData.siteNumber && <p>Site Number: {formData.siteNumber}</p>}
          <p>Guests: {formData.adultCount} Adults, {formData.childCount} Children</p>
          <p>Name: {formData.firstName} {formData.lastName}</p>
          <p>Email: {formData.email}</p>
          <p>Phone: {formData.phoneNumber}</p>
          {Object.values(selectedExtras).length > 0 && (
            <>
              <h5 className="font-semibold mt-2">Additional Services:</h5>
              <ul className="list-disc pl-5">
                {Object.values(selectedExtras).map(service => (
                  <li key={service.id}>
                    {service.name} (x{service.quantity}) - ${(service.price * service.quantity).toFixed(2)}
                  </li>
                ))}
              </ul>
            </>
          )}
          <p className="font-bold mt-2">Total Price: ${totalPrice.toFixed(2)}</p>
        </div>
        <p className="text-sm text-gray-600">
          Please review your reservation details above. If everything is correct, click "Proceed to Payment" to complete your booking.
        </p>
      </div>
    </>
  );
};

export default Step6;

================
File: src/components/reservations/Step7.js
================
// src/components/reservations/Step7.js
import React from 'react';
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import CheckoutForm from '../CheckoutForm';
import config from '../../config/appConfig';

const stripePromise = loadStripe(config.stripe.publishableKey);

const Step7 = ({ totalPrice, onPaymentSuccess, onPaymentError }) => {
  return (
    <>
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Step 7: Payment</h3>
      <div className="space-y-4">
        <div className="bg-gray-100 p-4 rounded-md">
          <h4 className="font-semibold mb-2">Reservation Summary:</h4>
          <p>Total Price: ${totalPrice.toFixed(2)}</p>
        </div>
        <Elements stripe={stripePromise}>
          <CheckoutForm 
            totalAmount={totalPrice}
            onPaymentSuccess={onPaymentSuccess}
            onPaymentError={onPaymentError}
          />
        </Elements>
      </div>
    </>
  );
};

export default Step7;

================
File: src/components/reservations/Step8.js
================
// src/components/reservations/Step8.js
import React from 'react';
import { Button } from '../ui/button';
import { MapPin, Info } from 'lucide-react';

const Step8 = ({ formData, siteTypes, rules, onReturnToKiosk }) => {
  return (
    <>
      <h3 className="text-lg lg:text-xl font-semibold mb-4">Reservation Confirmed!</h3>
      <div className="space-y-6">
        <div>
          <h4 className="font-semibold text-lg flex items-center mb-2">
            <MapPin className="mr-2 h-5 w-5 text-blue-600" />
            Your Campsite Information
          </h4>
          <div className="bg-blue-50 p-4 rounded-md">
            <p><strong>Site Number:</strong> {formData.siteNumber}</p>
            <p><strong>Site Type:</strong> {siteTypes.find(type => type.id === formData.siteType)?.name}</p>
            <p><strong>Check-in Date:</strong> {formData.startDate?.toLocaleDateString()}</p>
            <p><strong>Check-out Date:</strong> {new Date(formData.startDate?.getTime() + formData.nights * 24 * 60 * 60 * 1000).toLocaleDateString()}</p>
            <p><strong>Number of Nights:</strong> {formData.nights}</p>
          </div>
        </div>
        <div>
          <h4 className="font-semibold text-lg flex items-center mb-2">
            <Info className="mr-2 h-5 w-5 text-blue-600" />
            Campground Rules
          </h4>
          <ul className="list-disc pl-5 space-y-2">
            {rules.map((rule, index) => (
              <li key={index}>{rule}</li>
            ))}
          </ul>
        </div>
        <p className="text-sm text-gray-600">
          For more information or assistance, please visit the campground office.
        </p>
        <Button 
          onClick={onReturnToKiosk}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white"
        >
          Return to Kiosk
        </Button>
      </div>
    </>
  );
};

export default Step8;

================
File: src/components/ui/button.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"
import { cn } from "../../lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props}
    />
  )
})
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.jsx
================
import * as React from "react"
import { cn } from "../../lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, children, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props}
  >
    {children || 'Card Title'}
  </h3>
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/input.jsx
================
import * as React from "react"
import { cn } from "../../lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Input.displayName = "Input"

export { Input }

================
File: src/pages/api/available-sites.js
================
// pages/api/available-sites.js
import { supabase } from '../../lib/supabaseClient'

export default async function handler(req, res) {
  if (req.method === 'GET') {
    const { startDate, endDate, siteType } = req.query
    try {
      const { data, error } = await supabase
        .from('sites')
        .select('*, site_types!inner(*)')
        .eq('site_types.id', siteType)
        .not('id', 'in', supabase
          .from('reservations')
          .select('site_id')
          .gte('start_date', startDate)
          .lte('end_date', endDate)
        )

      if (error) throw error
      res.status(200).json(data)
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch available sites' })
    }
  } else {
    res.setHeader('Allow', ['GET'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}

================
File: src/pages/api/reservations.js
================
// pages/api/reservations.js
import { supabase } from '../../lib/supabaseClient'

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { 
      siteId, startDate, endDate, firstName, lastName, 
      email, phoneNumber, adultCount, childCount, 
      totalPrice, extras 
    } = req.body

    try {
      // Insert the reservation
      const { data: reservation, error: reservationError } = await supabase
        .from('reservations')
        .insert({
          site_id: siteId,
          start_date: startDate,
          end_date: endDate,
          guest_name: `${firstName} ${lastName}`,
          guest_email: email,
          guest_phone: phoneNumber,
          adult_count: adultCount,
          child_count: childCount,
          total_price: totalPrice
        })
        .single()

      if (reservationError) throw reservationError

      // Insert the additional services
      if (extras && extras.length > 0) {
        const reservationServices = extras.map(extra => ({
          reservation_id: reservation.id,
          service_id: extra.id,
          quantity: extra.quantity
        }))

        const { error: servicesError } = await supabase
          .from('reservation_services')
          .insert(reservationServices)

        if (servicesError) throw servicesError
      }

      res.status(201).json({ success: true, reservation })
    } catch (error) {
      res.status(500).json({ error: 'Failed to create reservation' })
    }
  } else {
    res.setHeader('Allow', ['POST'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}

================
File: src/pages/api/site-types.js
================
// pages/api/site-types.js
import { supabase } from '../../lib/supabaseClient'

export default async function handler(req, res) {
  if (req.method === 'GET') {
    try {
      const { data, error } = await supabase
        .from('site_types')
        .select('*')
      
      if (error) throw error
      res.status(200).json(data)
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch site types' })
    }
  } else {
    res.setHeader('Allow', ['GET'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}

================
File: src/pages/api/auth/[...supabase].js
================
// pages/api/auth/[...supabase].js
import { handleAuth } from '@supabase/auth-helpers-nextjs'

export default handleAuth({ logout: { returnTo: '/' } })
